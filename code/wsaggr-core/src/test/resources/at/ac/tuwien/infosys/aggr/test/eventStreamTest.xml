<tns:aggregate xmlns:tns="http://infosys.tuwien.ac.at/WS-Aggregation">
	<inputs>
		<subscribe id="1" serviceURL="http://localhost:50431/events?wsdl">
			<config>
			</config>
		</subscribe>
		<subscribe id="2" serviceURL="http://localhost:50431/events?wsdl">
			<config>
			</config>
		</subscribe>
		<subscribe id="3" serviceURL="http://localhost:50432/events?wsdl">
			<config>
			</config>
		</subscribe>
	</inputs>
	<queries>
	 	<preparationQuery forInputs="1"><![CDATA[
	 		declare namespace x = "wsaggr";
			declare variable $input external;
			declare function x:sorted($list as item()*)
			  as xs:boolean {
			     (every $i in 1 to (count($list) - 1) 
				satisfies (number($list[$i]) lt number($list[$i + 1])))
			};
			
			let $input1 := (for $i in $input/stock return $i) return (
			for sliding window $w in $input1
			start $s at $spos when true()
			end $e at $epos when count(
					let $sub := (for $i in $spos to $epos return $input1[$i])
					return $sub[@symbol eq $s/@symbol]
				) ge 3
			let $list := (let $sub := (for $i in $spos to $epos return $input1[$i])
					return $sub[@symbol eq $s/@symbol])
			where x:sorted($list)
			return
			<rising symbol="{$s/@symbol}">{$list}</rising>)
		]]></preparationQuery>
	 	<preparationQuery forInputs="2"><![CDATA[
	 		for $i in $input return <in>{$i}</in>
		]]></preparationQuery>
	 	<preparationQuery forInputs="3"><![CDATA[
	 	for tumbling window $w in $input
	  	start $s at $spos previous $sprev when true()
		only end $e next $enext when ($spos le 1) or
			(number($sprev/node()[1]/text()) lt number($e/node()[1]/text()))
		return
		<maxbid count="{count($input)}" pos="{$spos}">{$e/node()[1]/text()}</maxbid>
		]]></preparationQuery>
	 	<terminationQuery forInputs="3.?"><![CDATA[
	 	for $i in $input return $i
		]]></terminationQuery>
		 <query><![CDATA[
			<r><table border="1"><tr><td>Stock</td><td>price</td><td>rising-3</td><td>bid</td><td>ask</td><td>all-values</td></tr>{
			for $i in distinct-values(//in//stock/@symbol) 
			let $stocks := //in//stock,
			$rising := //rising[@symbol=$i]
			order by $i return
			<tr><td>{$i}</td>
			 <td>{let $values := $stocks[@symbol=$i][last()] return $values[last()]}</td>
			 <td>{string-join($rising[count(stock) ge 3][last()]/stock,', ')}</td>
			 <td>{//bid[@symbol=$i][last()]}</td>
			 <td>{//ask[@symbol=$i][last()]}</td>
			 <td>{let $values := $stocks[@symbol=$i] return string-join($values,',')}</td></tr>
			}</table></r>
		]]></query>
	</queries>
	<monitor>
		<epr xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing">
				<wsa:Address>http://127.0.0.1:40405/client</wsa:Address> 
			<wsa:ServiceName PortName="ClientPort">tns:Client</wsa:ServiceName>
		</epr>
	</monitor>
	<incremental>true</incremental>
</tns:aggregate>