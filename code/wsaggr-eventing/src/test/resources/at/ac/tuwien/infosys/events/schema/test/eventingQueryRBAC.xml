<tns:aggregate xmlns:tns="http://infosys.tuwien.ac.at/WS-Aggregation">
	<inputs>
		<subscribe id="1" serviceURL="http://localhost:8787/rbac?wsdl"/>
	</inputs>
	<queries>
	
	 	<preparationQuery forInputs="1"><![CDATA[
		declare namespace x = "wsaggr";
		declare variable $input external; 
		declare function x:nextDiffEl( $list as item()*, $start as xs:int, 
			$name as xs:string) as xs:int {
			let $result := if (count($list) lt $start) then -1
			else if (local-name($list[$start]) ne $name) then $start
			else x:nextDiffEl($list, $start + 1, $name)
			return $result
		};
		declare function x:count( $list as item()* ) as xs:int {
			let $result := x:count($list, 0)
			return $result
		};
		declare function x:count( $list as item()*, $start as xs:int) as xs:int {
			let $result := if (count($list) lt 1) then $start
			else x:count($list[position() gt 1], $start + 1)
			return $result
		};
		
		let $sub1 := (for $i in $input/data return $i)
		return (
		for sliding window $w in $sub1
		start $s at $spos when local-name($s/*[1]) = 'login'
		end $e at $epos when count((
			let $nextIndex1 := $spos return (
					let $sub2 := (for $i in $nextIndex1 to $epos return $sub1[$i]),
					$children2 := $sub2/*,
					$nextIndexTmp2 := x:nextDiffEl($children2,1,'login'),
					$nextIndex2 := if ($nextIndexTmp2 le 0) then 1 else $nextIndexTmp2,
					$result2 := if ($nextIndexTmp2 le 0) then ('empty')
					else if (not(matches(local-name($children2[$nextIndexTmp2]),'.*'))) then 'false3'
					else if (1 gt 0 and $nextIndexTmp2 gt 1) then 'false4'
					else (true())
					return $result2
				)
		)) ge 1
		let $list := ((
				
					let $sub2 := (for $i in $spos to $epos return $sub1[$i]),
					$children2 := $sub2/*,
					$nextIndexTmp2 := x:nextDiffEl($children2,1,'login'),
					$nextIndex2 := if ($nextIndexTmp2 le 0) then 1 else $nextIndexTmp2,
					$result2 := if ($nextIndexTmp2 le 0) then ('empty')
					else if (not(matches(local-name($children2[$nextIndexTmp2]),'.*'))) then 'false3'
					else if (1 gt 0 and $nextIndexTmp2 gt 1) then 'false4'
					else (true())
					return $result2
		))
		where count($list) ge 1
		return <seq s="{$spos}" e="{$epos}">{$w}</seq>
		)
		]]></preparationQuery>
		
				
					
	 	<preparationQuery forInputs="1__"><![CDATA[
	 		declare namespace x = "wsaggr";
	 		declare variable $input external; 
	 		declare function x:nextDiffEl( $list as item()*, $start as xs:int, 
					$name as xs:string) as xs:int {
				let $result := if (count($list) lt $start) then -1
				else if (local-name($list[$start]) ne $name) then $start
				else x:nextDiffEl($list, $start + 1, $name)
				return $result
			};
			
			
	 		let $input1 := (for $i in $input/data return $i) return (
			for sliding window $w in $input1
			start $s at $spos when local-name($s/child::*[1]) = 'login'
			end $e at $epos when count(
				let $sub := (for $i in $spos to $epos return $input1[$i]),
				$children := $sub/child::*,
				$nextIndex := x:nextDiffEl($children,1,'login'),
				$result := if ($nextIndex le 0) then ()
				else if (local-name($children[$nextIndex]) ne 'access') then 'false1'
				else (
					let $sub1 := (for $i in $nextIndex to count($sub) return $sub[$i]),
					$children1 := $sub1/child::*,
					$nextIndex1 := x:nextDiffEl($children1,1,'access'),
					$node := $children1[$nextIndex1],
					$result1 := if ($nextIndex1 le 0) then ()
					else if (local-name($node) eq 'test') then (
						let $sub2 := (for $i in $nextIndex1 to count($sub1) return $sub1[$i]),
						$children2 := $sub2/child::*,
						$nextIndex2 := x:nextDiffEl($children2,1,'test'),
						$result2 := if ($nextIndex2 le 0) then ()
						else if (local-name($children2[$nextIndex2]) ne 'logout') then 'false3'
						else true()
						return $result2
					)
					else if (local-name($node) eq 'test1') then (
						let $sub2 := (for $i in $nextIndex1 to count($sub1) return $sub1[$i]),
						$children2 := $sub2/child::*,
						$nextIndex2 := x:nextDiffEl($children2,1,'test1'),
						$result2 := if ($nextIndex2 le 0) then ()
						else if (local-name($children2[$nextIndex2]) ne 'logout') then 'false3'
						else true()
						return $result2
					)
					else 'false2'
					return $result1
				)
				return $result
			) ge 1
			let $list := (
				let $sub := (for $i in $spos to $epos return $input1[$i]),
				$children := $sub/child::*,
				$nextIndex := x:nextDiffEl($children,1,'login'),
				$result := if ($nextIndex le 0) then ()
				else if (local-name($children[$nextIndex]) ne 'access') then 'false1'
				else (
					let $sub1 := (for $i in $nextIndex to count($sub) return $sub[$i]),
					$children1 := $sub1/child::*,
					$nextIndex1 := x:nextDiffEl($children1,1,'access'),
					$node := $children1[$nextIndex1],
					$result1 := if ($nextIndex1 le 0) then ()
					else if (local-name($node) eq 'test') then (
						let $sub2 := (for $i in $nextIndex1 to count($sub1) return $sub1[$i]),
						$children2 := $sub2/child::*,
						$nextIndex2 := x:nextDiffEl($children2,1,'test'),
						$result2 := if ($nextIndex2 le 0) then ()
						else if (local-name($children2[$nextIndex2]) ne 'logout') then 'false3'
						else true()
						return $result2
					)
					else if (local-name($node) eq 'test1') then (
						let $sub2 := (for $i in $nextIndex1 to count($sub1) return $sub1[$i]),
						$children2 := $sub2/child::*,
						$nextIndex2 := x:nextDiffEl($children2,1,'test1'),
						$result2 := if ($nextIndex2 le 0) then ()
						else if (local-name($children2[$nextIndex2]) ne 'logout') then 'false3'
						else true()
						return $result2
					)
					else 'false2'
					return $result1
				)
				return $result
			)
			where count($list) ge 1
			return <seq s="{$spos}" e="{$epos}">{$w}<tmp>{$list}</tmp></seq>
			)
			
		]]></preparationQuery>
	 	<preparationQuery forInputs="1a"><![CDATA[
	 		let $input1 := (for $i in $input/data return $i) return (
			for sliding window $w in $input1
			start $s at $spos when local-name($s/child::*[1]) = 'login'
			end $e at $epos when count(
					let $sub := (for $i in $spos to $epos return $input1[$i])
					return (
						for sliding window $w1 in $sub
						start $s1 at $spos1 when true()
						end $e1 at $epos2 when count(
							let $sub := (for $i in $spos1 to $epos1 return $sub[$i])
							return (
								for sliding window $w2 in $sub
								start $s2 when true()
								end $e2 when true()
								where local-name($s2/child::*[1]) eq 'exit'
								return local-name($s2/child::*[1])
							)
						) ge 1
						where local-name($s1/child::*[1]) eq 'logout'
						return local-name($s1/child::*[1])
					)
				) ge 1
			return <seq s="{$spos}" e="{$epos}">{$w}<tmp></tmp></seq>
			)
		]]></preparationQuery>
	 	<preparationQuery forInputs="1b"><![CDATA[
	 		for tumbling window $w in $input/data
			start $s at $sID when local-name($s/child::*[1]) = 'login'
			end $e at $eID when count(
				let $tmp := $input/data[position() ge $sID]
				return (
					for sliding window $w1 in $tmp
					start $s1 when true()
					end $e1 when local-name($s1/child::*[1]) = 'logout'
					return false()
				)
			) gt 0
			return <seq s="{$sID}" e="{$eID}">{$w}</seq>
		]]></preparationQuery>
	</queries>
	<monitor>
		<epr xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing">
			<wsa:Address>http://127.0.0.1:40405/client</wsa:Address> 
			<wsa:ServiceName PortName="ClientPort">tns:Client</wsa:ServiceName>
		</epr>
	</monitor>
</tns:aggregate>