/*
 * Project 'WS-Aggregation':
 * http://www.infosys.tuwien.ac.at/prototype/WS-Aggregation/
 *
 * Copyright 2010-2012 Vienna University of Technology
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package at.ac.tuwien.infosys.aggr.waql;

/** Token Manager. */
@SuppressWarnings("all")
public class ParserTokenManager implements ParserConstants
{
        private int beforeInDirComment;
        private int beforeInDirPI;
        private int commentNestingDepth;
        private int beforeInCdata;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_11(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1, active2, active3), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_11()
{
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 205);
      default :
         return jjMoveNfa_11(0, 0);
   }
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 204;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 202;
            return -1;
         }
         return -1;
      case 1:
         if ((active3 & 0x10000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 202;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 36:
         return jjStopAtPos(0, 203);
      case 93:
         return jjMoveStringLiteralDfa1_10(0x10000L);
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_10(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa2_10(active3, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_10(0, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa2_10(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_10(0, 0L, 0L, 0L, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(1, 0L, 0L, 0L, active3);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active3 & 0x10000L) != 0L)
            return jjStopAtPos(2, 208);
         break;
      default :
         break;
   }
   return jjStartNfa_10(1, 0L, 0L, 0L, active3);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffefffffffffL & l) != 0L)
                     kind = 202;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 202;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 202)
                     kind = 202;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_15()
{
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_15(0x40000L);
      case 58:
         return jjMoveStringLiteralDfa1_15(0x100000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_15(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active3 & 0x100000L) != 0L)
            return jjStopAtPos(1, 212);
         break;
      case 58:
         if ((active3 & 0x40000L) != 0L)
            return jjStopAtPos(1, 210);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 17);
      case 39:
         return jjStopAtPos(0, 18);
      case 47:
         return jjMoveStringLiteralDfa1_4(0x10000L);
      case 61:
         return jjStopAtPos(0, 12);
      case 62:
         return jjStopAtPos(0, 15);
      default :
         return jjMoveNfa_4(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 176;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(0, 1);
                  break;
               case 3:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 185)
                     kind = 185;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjCheckNAddStates(2, 4);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 185)
                     kind = 185;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 36:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_1(0x800L, 0x0L, 0x0L);
      case 60:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_1(0x4000L, 0x8000000000000000L, 0x208L);
      case 123:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_1(0x80L, 0x0L, 0x0L);
      case 125:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_1(0x200L, 0x0L, 0x0L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, 0L, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active2, 0x8000000000000000L, active3, 0x200L);
      case 36:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 47:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      case 63:
         if ((active3 & 0x8L) != 0L)
            return jjStopAtPos(1, 195);
         break;
      case 123:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 125:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(0, old0, 0L, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, 0L, 0L, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_1(active2, 0x8000000000000000L, active3, 0L);
      case 91:
         return jjMoveStringLiteralDfa3_1(active2, 0L, active3, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(1, 0L, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa3_1(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(1, 0L, 0L, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, 0L, 0L, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(3, 191);
         break;
      case 67:
         return jjMoveStringLiteralDfa4_1(active2, 0L, active3, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(2, 0L, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa4_1(long old2, long active2, long old3, long active3)
{
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_1(2, 0L, 0L, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, 0L, 0L, 0L, active3);
      return 4;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa5_1(active3, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(3, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa5_1(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_1(3, 0L, 0L, 0L, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, 0L, 0L, 0L, active3);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_1(active3, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(4, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa6_1(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_1(4, 0L, 0L, 0L, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, 0L, 0L, 0L, active3);
      return 6;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa7_1(active3, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(5, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa7_1(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_1(5, 0L, 0L, 0L, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, 0L, 0L, 0L, active3);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_1(active3, 0x200L);
      default :
         break;
   }
   return jjStartNfa_1(6, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa8_1(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_1(6, 0L, 0L, 0L, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, 0L, 0L, 0L, active3);
      return 8;
   }
   switch(curChar)
   {
      case 91:
         if ((active3 & 0x200L) != 0L)
            return jjStopAtPos(8, 201);
         break;
      default :
         break;
   }
   return jjStartNfa_1(7, 0L, 0L, 0L, active3);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 22;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xefffffafffffffffL & l) != 0L)
                  {
                     if (kind > 177)
                        kind = 177;
                  }
                  else if (curChar == 38)
                     jjAddStates(5, 6);
                  if (curChar == 38)
                     jjAddStates(7, 10);
                  break;
               case 2:
                  if (curChar == 59 && kind > 172)
                     kind = 172;
                  break;
               case 14:
                  if ((0xefffffafffffffffL & l) != 0L && kind > 177)
                     kind = 177;
                  break;
               case 15:
                  if (curChar == 38)
                     jjAddStates(5, 6);
                  break;
               case 16:
                  if (curChar == 35)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 59 && kind > 175)
                     kind = 175;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 18);
                  break;
               case 21:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xd7ffffffffffffffL & l) != 0L && kind > 177)
                     kind = 177;
                  break;
               case 1:
                  if (curChar == 116)
                     jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 108)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 103)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 111)
                     jjCheckNAdd(1);
                  break;
               case 6:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 97)
                     jjAddStates(11, 12);
                  break;
               case 9:
                  if (curChar == 112)
                     jjCheckNAdd(2);
                  break;
               case 10:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 115)
                     jjCheckNAdd(2);
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 19:
                  if (curChar == 120)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(20, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 177)
                     kind = 177;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 22 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x8400000L) != 0L)
            return 81;
         if ((active1 & 0x40000000000L) != 0L)
            return 2;
         if ((active0 & 0x2L) != 0L || (active3 & 0x20000L) != 0L)
            return 55;
         if ((active0 & 0xaffffffffef80000L) != 0L || (active1 & 0xfe3ff8ff7fffffffL) != 0L || (active2 & 0x1e000fde03efd3cL) != 0L)
         {
            jjmatchedKind = 186;
            return 82;
         }
         return -1;
      case 1:
         if ((active0 & 0x200849600000000L) != 0L || (active1 & 0xfe0680a1005100a4L) != 0L || (active2 & 0x800L) != 0L)
            return 82;
         if ((active0 & 0xadff7b69fef80000L) != 0L || (active1 & 0x39785e7faeff5bL) != 0L || (active2 & 0x1e000fde03ef53cL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 186;
               jjmatchedPos = 1;
            }
            return 82;
         }
         return -1;
      case 2:
         if ((active0 & 0x400000L) != 0L || (active1 & 0x284800004090L) != 0L || (active2 & 0x20000000000010L) != 0L)
            return 82;
         if ((active0 & 0xadfffffffeb80000L) != 0L || (active1 & 0x3bd0167fefbf4bL) != 0L || (active2 & 0x1c000fde03efd2cL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 186;
               jjmatchedPos = 2;
            }
            return 82;
         }
         return -1;
      case 3:
         if ((active0 & 0xadfffffffef80000L) != 0L || (active1 & 0xbc0101dee8f49L) != 0L || (active2 & 0x1c000f5a03eed24L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 186;
               jjmatchedPos = 3;
            }
            return 82;
         }
         if ((active1 & 0x30100662013002L) != 0L || (active2 & 0x840001008L) != 0L)
            return 82;
         return -1;
      case 4:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 186;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2040b610000000L) != 0L || (active1 & 0x84010040e0800L) != 0L || (active2 & 0x400000100L) != 0L)
            return 82;
         if ((active0 & 0xadddbf49eef80000L) != 0L || (active1 & 0x13800059e08749L) != 0L || (active2 & 0x1c000f1a03eec24L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 186;
               jjmatchedPos = 4;
            }
            return 82;
         }
         return -1;
      case 5:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 186;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xac5dff4feeb00000L) != 0L || (active1 & 0x12800048c08541L) != 0L || (active2 & 0xc00035a03cec04L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 186;
               jjmatchedPos = 5;
            }
            return 82;
         }
         if ((active0 & 0x180000000480000L) != 0L || (active1 & 0x1000011200208L) != 0L || (active2 & 0x10000c000020020L) != 0L)
            return 82;
         return -1;
      case 6:
         if ((active0 & 0x404040422200000L) != 0L || (active1 & 0x401L) != 0L || (active2 & 0x80000080000000L) != 0L)
            return 82;
         if ((active0 & 0xa859fb4bcc900000L) != 0L || (active1 & 0x12800048c08140L) != 0L || (active2 & 0x4000f5203cec04L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 6;
            return 82;
         }
         return -1;
      case 7:
         if ((active0 & 0x597b0944800000L) != 0L || (active1 & 0x800048c00000L) != 0L || (active2 & 0x4000e50018ec00L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 186;
               jjmatchedPos = 7;
            }
            return 82;
         }
         if ((active0 & 0xa800804288100000L) != 0L || (active1 & 0x12000000008140L) != 0L || (active2 & 0x1020240004L) != 0L)
            return 82;
         return -1;
      case 8:
         if ((active0 & 0x517b0104000000L) != 0L || (active1 & 0x40800000L) != 0L || (active2 & 0x4000d500202400L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 186;
               jjmatchedPos = 8;
            }
            return 82;
         }
         if ((active0 & 0x8000840800000L) != 0L || (active1 & 0x800008400000L) != 0L || (active2 & 0x200018c800L) != 0L)
            return 82;
         return -1;
      case 9:
         if ((active0 & 0x40730104000000L) != 0L || (active2 & 0x4000f500284000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 186;
               jjmatchedPos = 9;
            }
            return 82;
         }
         if ((active0 & 0x11080000000000L) != 0L || (active1 & 0x40800000L) != 0L || (active2 & 0x2400L) != 0L)
            return 82;
         return -1;
      case 10:
         if ((active0 & 0x20000000000L) != 0L)
            return 82;
         if ((active0 & 0x40710104000000L) != 0L || (active2 & 0x4000f500286000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 10;
            return 82;
         }
         return -1;
      case 11:
         if ((active0 & 0x100000000L) != 0L)
            return 82;
         if ((active0 & 0x40710004000000L) != 0L || (active2 & 0x4000f500286000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 11;
            return 82;
         }
         return -1;
      case 12:
         if ((active2 & 0x1000000000L) != 0L)
            return 82;
         if ((active0 & 0x40710004000000L) != 0L || (active2 & 0x4000e500286000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 12;
            return 82;
         }
         return -1;
      case 13:
         if ((active0 & 0x100004000000L) != 0L || (active2 & 0xa400000000L) != 0L)
            return 82;
         if ((active0 & 0x40610000000000L) != 0L || (active2 & 0x40004100286000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 13;
            return 82;
         }
         return -1;
      case 14:
         if ((active0 & 0x10000000000L) != 0L)
            return 82;
         if ((active0 & 0x40600000000000L) != 0L || (active2 & 0x40004100286000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 14;
            return 82;
         }
         return -1;
      case 15:
         if ((active2 & 0x40004000200000L) != 0L)
            return 82;
         if ((active0 & 0x40600000000000L) != 0L || (active2 & 0x100086000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 15;
            return 82;
         }
         return -1;
      case 16:
         if ((active0 & 0x40200000000000L) != 0L || (active2 & 0x84000L) != 0L)
            return 82;
         if ((active0 & 0x400000000000L) != 0L || (active2 & 0x100002000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 16;
            return 82;
         }
         return -1;
      case 17:
         if ((active0 & 0x400000000000L) != 0L || (active2 & 0x2000L) != 0L)
            return 82;
         if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 17;
            return 82;
         }
         return -1;
      case 18:
         if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 18;
            return 82;
         }
         return -1;
      case 19:
         if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 19;
            return 82;
         }
         return -1;
      case 20:
         if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 20;
            return 82;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x0L, 0x0L);
      case 35:
         return jjStopAtPos(0, 161);
      case 36:
         return jjStopAtPos(0, 10);
      case 37:
         return jjStopAtPos(0, 60);
      case 40:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20000L);
      case 41:
         return jjStopAtPos(0, 3);
      case 42:
         return jjStartNfaWithStates_0(0, 106, 2);
      case 43:
         return jjStopAtPos(0, 104);
      case 44:
         return jjStopAtPos(0, 2);
      case 45:
         return jjStopAtPos(0, 105);
      case 46:
         jjmatchedKind = 155;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000L, 0x0L);
      case 47:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80L, 0x0L);
      case 58:
         jjmatchedKind = 168;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x200L, 0x0L);
      case 59:
         return jjStopAtPos(0, 24);
      case 60:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L, 0x8000000000000001L, 0x8L);
      case 61:
         return jjStopAtPos(0, 12);
      case 62:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x2L, 0x0L);
      case 63:
         return jjStopAtPos(0, 156);
      case 64:
         return jjStopAtPos(0, 144);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 153);
      case 93:
         return jjStopAtPos(0, 154);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x4000400044L, 0x240800L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x84000000L, 0x100000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10140000000L, 0x30001020020001L, 0x80000100L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x20300022000000L, 0x80000800000L, 0x1020002400L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8400002000100000L, 0x201000404004000L, 0x400000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x10L, 0xc000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x404000000000L, 0x6000000000080000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80840000000000L, 0x8002900100000022L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x1800000000000080L, 0x10L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000000400000L, 0x200000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xa0000800000L, 0x400000000010000L, 0x40002800000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1600000000L, 0x4002000002008L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x4e000008000000L, 0x8000L, 0x1800001001a0000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100000010000000L, 0x1a200c00L, 0xc000001020L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8008a40000100L, 0x40000008L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x400000000000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2000000000200000L, 0x0L, 0x4L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x41200L, 0x0L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L, 0x0L, 0x0L);
      case 122:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 6);
      case 124:
         return jjStopAtPos(0, 95);
      case 125:
         return jjStopAtPos(0, 8);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L);
      case 46:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      case 47:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         break;
      case 58:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(1, 137);
         else if ((active3 & 0x20000L) != 0L)
            return jjStopAtPos(1, 209);
         break;
      case 60:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         break;
      case 61:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         break;
      case 62:
         if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         break;
      case 63:
         if ((active3 & 0x8L) != 0L)
            return jjStopAtPos(1, 195);
         break;
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2040000080800000L, active1, 0x30001028000000L, active2, 0x20002000020014L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L, active2, 0xc000000000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 126, 82);
         return jjMoveStringLiteralDfa2_0(active0, 0x1c308022200000L, active1, 0x1810080L, active2, 0x40003400L, active3, 0L);
      case 102:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 96, 82);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 114, 82);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200041000L, active2, 0x100L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x21000000000000L, active1, 0x80000000200L, active2, 0L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x400000440L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80002000000000L, active1, 0L, active2, 0x400000000L, active3, 0L);
      case 110:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x840800100000L, active1, 0x2c04000006000L, active2, 0x240000L, active3, 0L);
      case 111:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 103, 82);
         return jjMoveStringLiteralDfa2_0(active0, 0xb0144400000L, active1, 0x200002020011L, active2, 0x400018a000c000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0L);
      case 113:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 121, 82);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x405608000000L, active1, 0x8000800088000L, active2, 0x80000100180000L, active3, 0L);
      case 115:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 127, 82);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0L);
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 123, 82);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 125, 82);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0x200802L, active2, 0x820L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x100L, active2, 0x100000000000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L, active2, 0L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000L, active2, 0L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x1000000000000L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 84, 82);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L, active2, 0x8L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000000000L, active1, 0L, active2, 0x8000000000000000L);
      case 78:
         if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 181, 82);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2008000000000L, active1, 0x200800L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x300002100000L, active1, 0x1000000400000L, active2, 0x1020240000L);
      case 100:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 78, 82);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 102, 82);
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1600400000L, active1, 0L, active2, 0x800000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400004008000000L, active1, 0x8000204049002L, active2, 0x180000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x800020000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x100040000000000L, active1, 0L, active2, 0xc000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x500010000400L, active2, 0x80000000000100L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x2040L, active2, 0xd004L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0x2000100L, active2, 0x2080000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x801000100000000L, active1, 0x201L, active2, 0x40000000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400800000000L, active1, 0x80000L, active2, 0x100000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80012000000000L, active1, 0x40000000L, active2, 0x400000008L);
      case 114:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 82);
         return jjMoveStringLiteralDfa3_0(active0, 0x201c000010200000L, active1, 0L, active2, 0x20020L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0x32000420800000L, active2, 0x2400L);
      case 116:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 82);
         return jjMoveStringLiteralDfa3_0(active0, 0x8040000000000000L, active1, 0x801009000008L, active2, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4080000L, active1, 0x20000L, active2, 0L);
      case 118:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 107, 82);
         break;
      case 120:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 132, 82);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L, active2, 0x40000000L);
      case 121:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 99, 82);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(3, 191);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4020000000L, active1, 0x8000000000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200100L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x804000000000000L, active1, 0x1000800000L, active2, 0x100182400L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x600L, active2, 0x40000000000000L);
      case 101:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 82);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 82);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 82);
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 163, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x8100041680880000L, active1, 0x1800040400000L, active2, 0xe000260000L);
      case 102:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 140, 82);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2020b80010000000L, active1, 0x8000008L, active2, 0x24L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x42000000L, active1, 0L, active2, 0x10000000000c100L);
      case 109:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L, active2, 0x80000000L);
      case 110:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 82);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 97, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0x20000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x90000000100000L, active1, 0x400000000040L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x4040800L, active2, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8108200000L, active1, 0L, active2, 0L);
      case 116:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 82);
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 158, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x40002000000000L, active1, 0x12000010000001L, active2, 0x400000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1400000400000L, active1, 0x1080000L, active2, 0x1020000000L);
      case 118:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L, active2, 0x80000000000000L);
      case 121:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x10010080000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000042000000L, active1, 0x12000000000000L, active2, 0x80000000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000L, active2, 0x20L);
      case 100:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 136, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0x804100000L, active1, 0L, active2, 0x4L);
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0x444000008000000L, active1, 0x800001L, active2, 0x40000180182400L);
      case 104:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 82);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0x8400L, active2, 0x100000000000800L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x200100L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x108300000000000L, active1, 0L, active2, 0xd020000000L);
      case 110:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0x880000000000L, active1, 0x400000L, active2, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x208L, active2, 0xc000L);
      case 112:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 82);
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0x1000000000000L, active2, 0L);
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8080060600080000L, active1, 0x800001000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000800000L, active1, 0x48000000L, active2, 0x2000240000L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 82);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 82);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 82);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 82);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0x800004100000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 121:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(5, 49);
         break;
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0L, active2, 0x400000000L);
      case 97:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x300004000000L, active1, 0L, active2, 0xc000000004L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0x10000000000000L, active2, 0x800L);
      case 99:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 184, 82);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x400000L, active2, 0x180000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 82);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0x24c00000000L, active1, 0L, active2, 0x1020000000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 104:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x808c40200100000L, active1, 0x140L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 82);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0x8404010000000000L, active1, 0x2000000800400L, active2, 0x80002400L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0x8000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0L, active2, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000010a000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000L, active2, 0x100000000L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 82);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 112, 82);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 133, 82);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 145, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0L, active2, 0xc0000000240000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000L, active2, 0xc000L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 82);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0xc000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000010000800000L, active1, 0L, active2, 0x2000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 82);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L, active2, 0x2400L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 82);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 183, 82);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0x800000000000L, active2, 0x40000000000000L);
      case 103:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 82);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000040000000L, active1, 0x48400000L, active2, 0x18c000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x2008300000000000L, active1, 0x10000000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 82);
         return jjMoveStringLiteralDfa7_0(active0, 0x40400200100000L, active1, 0x140L, active2, 0x1020000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L, active2, 0x240000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x884000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x1024000000000L, active1, 0L, active2, 0x500000000L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 82);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 82);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 82);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 82);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 82);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 159, 82);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L, active2, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x8000L, active2, 0x800L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x40300000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000002400L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100800000L, active1, 0x800000000000L, active2, 0x2000000000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 82);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 82);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 113, 82);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 116, 82);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 130, 82);
         return jjMoveStringLiteralDfa8_0(active0, 0x20800000000L, active1, 0x8000000L, active2, 0x8400000000L);
      case 103:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 82);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 82);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 82);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 82);
         return jjMoveStringLiteralDfa8_0(active0, 0x10400000000000L, active1, 0L, active2, 0L);
      case 105:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 82);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0x800000L, active2, 0x100000000L);
      case 108:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 82);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 82);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L, active2, 0x18c000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L, active2, 0x40000000200000L);
      case 115:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 79, 82);
         break;
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 82);
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000L, active2, 0x1000000800L);
      case 121:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 47, 82);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x400004000000L, active1, 0L, active2, 0x1000200000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 35, 82);
         break;
      case 101:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 51, 82);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 139, 82);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0L, active2, 0x2000000000L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 103:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 86, 82);
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L, active1, 0L, active2, 0x84000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x10080000000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40000000000000L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 82);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000L, active2, 0x100002400L);
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 91, 82);
         return jjMoveStringLiteralDfa9_0(active0, 0x40200000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 111, 82);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0L, active2, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2000084000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x40200000000000L, active1, 0L, active2, 0x8000000000L);
      case 103:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 87, 82);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x100000000L);
      case 104:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 94, 82);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L, active1, 0L, active2, 0x40000000000000L);
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 48, 82);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L, active1, 0L, active2, 0x200000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x410004000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 82);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 52, 82);
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x4000002000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x400000000L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, active2, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x100002000L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 82);
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L, active2, 0x400000000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x8000000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x40002000000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L, active2, 0x1000000000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x40210004000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active2, 0x4000200000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x84000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, active2, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x40210004000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x40004100084000L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(11, 32, 82);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x400000000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x2000002000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, active2, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x500000000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x4000084000L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x10004000000L, active2, 0x400000000L);
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x2000000000L);
      case 101:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 164, 82);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x8100000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x40200000000000L, active2, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x40000000200000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, active2, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x40200000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(13, 26, 82);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(13, 162, 82);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 165, 82);
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L, active2, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x84000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x100000000L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 44, 82);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 167, 82);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x40000000000000L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, active2, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0x40000000084000L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0x200000L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 40, 82);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x40200000000000L, active2, 0x4100000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, active2, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 182, 82);
         break;
      case 101:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 166, 82);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active2, 0x2000L);
      case 102:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(15, 149, 82);
         break;
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active2, 0x84000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x40200000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active2, 0x100000000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(14, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, active2, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 103:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(16, 142, 82);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(16, 147, 82);
         break;
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active2, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000000L, active2, 0L);
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 45, 82);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 54, 82);
         break;
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active2, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(15, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, active2, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active2, 0x100000000L);
      case 102:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(17, 141, 82);
         break;
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 46, 82);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(16, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, active2, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa19_0(active2, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, active2, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa20_0(active2, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, active2, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa21_0(active2, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, active2, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 110:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(21, 160, 82);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, active2, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 81;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(13, 18);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(79, 80);
                  else if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 55;
                  else if (curChar == 39)
                     jjCheckNAddStates(19, 23);
                  else if (curChar == 34)
                     jjCheckNAddStates(24, 28);
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 82:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 186)
                        kind = 186;
                     jjCheckNAdd(77);
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 75;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 72;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 66);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 169)
                        kind = 169;
                     jjCheckNAdd(79);
                  }
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
               case 9:
                  if (curChar == 34)
                     jjCheckNAddStates(24, 28);
                  break;
               case 6:
                  if (curChar == 38)
                     jjAddStates(29, 32);
                  break;
               case 8:
                  if (curChar == 59)
                     jjCheckNAddStates(24, 28);
                  break;
               case 10:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0xffffffbbffffffffL & l) != 0L)
                     jjCheckNAddStates(24, 28);
                  break;
               case 12:
                  if (curChar == 34 && kind > 171)
                     kind = 171;
                  break;
               case 13:
                  if (curChar == 38)
                     jjAddStates(33, 34);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 8);
                  break;
               case 16:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 35)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 8);
                  break;
               case 30:
               case 34:
                  if (curChar == 39)
                     jjCheckNAddStates(19, 23);
                  break;
               case 31:
                  if (curChar == 38)
                     jjAddStates(35, 38);
                  break;
               case 33:
                  if (curChar == 59)
                     jjCheckNAddStates(19, 23);
                  break;
               case 35:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0xffffff3fffffffffL & l) != 0L)
                     jjCheckNAddStates(19, 23);
                  break;
               case 37:
                  if (curChar == 39 && kind > 171)
                     kind = 171;
                  break;
               case 38:
                  if (curChar == 38)
                     jjAddStates(39, 40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 33);
                  break;
               case 41:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 42:
                  if (curChar == 35)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 33);
                  break;
               case 55:
                  if (curChar != 35)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 187)
                     kind = 187;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(13, 18);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(59);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar != 46)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(62);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(41, 43);
                  break;
               case 64:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  jjCheckNAdd(68);
                  break;
               case 70:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 71:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if (curChar == 42 && kind > 151)
                     kind = 151;
                  break;
               case 73:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 74:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 76:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 185)
                     kind = 185;
                  jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 77:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjCheckNAdd(77);
                  break;
               case 78:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  jjCheckNAdd(79);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjCheckNAddStates(44, 48);
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 186)
                        kind = 186;
                     jjCheckNAdd(77);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 3:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAdd(4);
                  break;
               case 7:
                  if (curChar == 116)
                     jjCheckNAdd(8);
                  break;
               case 11:
                  jjAddStates(24, 28);
                  break;
               case 14:
                  if (curChar == 120)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(15, 8);
                  break;
               case 19:
                  if (curChar == 108)
                     jjCheckNAdd(7);
                  break;
               case 20:
                  if (curChar == 103)
                     jjCheckNAdd(7);
                  break;
               case 21:
                  if (curChar == 111)
                     jjCheckNAdd(7);
                  break;
               case 22:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 97)
                     jjAddStates(49, 50);
                  break;
               case 25:
                  if (curChar == 112)
                     jjCheckNAdd(8);
                  break;
               case 26:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 115)
                     jjCheckNAdd(8);
                  break;
               case 28:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 32:
                  if (curChar == 116)
                     jjCheckNAdd(33);
                  break;
               case 36:
                  jjAddStates(19, 23);
                  break;
               case 39:
                  if (curChar == 120)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(40, 33);
                  break;
               case 44:
                  if (curChar == 108)
                     jjCheckNAdd(32);
                  break;
               case 45:
                  if (curChar == 103)
                     jjCheckNAdd(32);
                  break;
               case 46:
                  if (curChar == 111)
                     jjCheckNAdd(32);
                  break;
               case 47:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 97)
                     jjAddStates(51, 52);
                  break;
               case 50:
                  if (curChar == 112)
                     jjCheckNAdd(33);
                  break;
               case 51:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 115)
                     jjCheckNAdd(33);
                  break;
               case 53:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 66:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 75:
               case 76:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 185)
                     kind = 185;
                  jjCheckNAdd(76);
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjCheckNAdd(77);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(24, 28);
                  break;
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(19, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 81 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 34:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x200000000000L);
      case 36:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_2(0x800L, 0x0L);
      case 123:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_2(0x80L, 0x0L);
      case 125:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_2(0x200L, 0x0L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 173);
         break;
      case 36:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 123:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 125:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, 0L, active2);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 22;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xefffffabffffffffL & l) != 0L)
                  {
                     if (kind > 178)
                        kind = 178;
                  }
                  else if (curChar == 38)
                     jjAddStates(5, 6);
                  if (curChar == 38)
                     jjAddStates(7, 10);
                  break;
               case 2:
                  if (curChar == 59 && kind > 172)
                     kind = 172;
                  break;
               case 14:
                  if ((0xefffffabffffffffL & l) != 0L && kind > 178)
                     kind = 178;
                  break;
               case 15:
                  if (curChar == 38)
                     jjAddStates(5, 6);
                  break;
               case 16:
                  if (curChar == 35)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 59 && kind > 175)
                     kind = 175;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 18);
                  break;
               case 21:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xd7ffffffffffffffL & l) != 0L && kind > 178)
                     kind = 178;
                  break;
               case 1:
                  if (curChar == 116)
                     jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 108)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 103)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 111)
                     jjCheckNAdd(1);
                  break;
               case 6:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 97)
                     jjAddStates(11, 12);
                  break;
               case 9:
                  if (curChar == 112)
                     jjCheckNAdd(2);
                  break;
               case 10:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 115)
                     jjCheckNAdd(2);
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 19:
                  if (curChar == 120)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(20, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 22 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_13()
{
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 207);
      default :
         return jjMoveNfa_13(0, 0);
   }
}
private int jjMoveNfa_13(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 206;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     kind = 206;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 206)
                     kind = 206;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_14()
{
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_14(0x40000L);
      case 58:
         return jjMoveStringLiteralDfa1_14(0x200000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_14(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active3 & 0x200000L) != 0L)
            return jjStopAtPos(1, 213);
         break;
      case 58:
         if ((active3 & 0x40000L) != 0L)
            return jjStopAtPos(1, 210);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 36:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_3(0x800L, 0x0L);
      case 39:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x400000000000L);
      case 123:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_3(0x80L, 0x0L);
      case 125:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_3(0x200L, 0x0L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 36:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 39:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 174);
         break;
      case 123:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 125:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0, 0L, active2);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffefffffffffL & l) != 0L)
                  {
                     if (kind > 180)
                        kind = 180;
                  }
                  if ((0xefffff2fffffffffL & l) != 0L)
                  {
                     if (kind > 179)
                        kind = 179;
                  }
                  else if (curChar == 38)
                     jjAddStates(55, 56);
                  if (curChar == 38)
                     jjAddStates(7, 10);
                  break;
               case 2:
                  if (curChar == 59 && kind > 172)
                     kind = 172;
                  break;
               case 14:
                  if ((0xefffff2fffffffffL & l) != 0L && kind > 179)
                     kind = 179;
                  break;
               case 15:
                  if ((0xffffffefffffffffL & l) != 0L && kind > 180)
                     kind = 180;
                  break;
               case 16:
                  if (curChar == 38)
                     jjAddStates(55, 56);
                  break;
               case 17:
                  if (curChar == 35)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 59 && kind > 175)
                     kind = 175;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 19);
                  break;
               case 22:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 180)
                     kind = 180;
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 179)
                        kind = 179;
                  }
                  break;
               case 1:
                  if (curChar == 116)
                     jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 108)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 103)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 111)
                     jjCheckNAdd(1);
                  break;
               case 6:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 97)
                     jjAddStates(11, 12);
                  break;
               case 9:
                  if (curChar == 112)
                     jjCheckNAdd(2);
                  break;
               case 10:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 115)
                     jjCheckNAdd(2);
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0xd7ffffffffffffffL & l) != 0L && kind > 179)
                     kind = 179;
                  break;
               case 15:
                  if (kind > 180)
                     kind = 180;
                  break;
               case 20:
                  if (curChar == 120)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(21, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 179)
                        kind = 179;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 180)
                        kind = 180;
                  }
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 179)
                     kind = 179;
                  break;
               case 15:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 180)
                     kind = 180;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_12()
{
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 205);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa1_9(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_9(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active3 & 0x100L) != 0L)
            return jjStopAtPos(1, 200);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa1_8(0x100L);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_8(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active3 & 0x100L) != 0L)
            return jjStopAtPos(1, 200);
         break;
      default :
         break;
   }
   return jjStartNfa_8(0, 0L, 0L, 0L, active3);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 5:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 198;
                  jjCheckNAdd(5);
                  break;
               case 4:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  kind = 197;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 197)
                        kind = 197;
                     jjCheckNAdd(4);
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x100000001000L & l) != 0L && kind > 196)
                     kind = 196;
                  break;
               case 3:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 197)
                     kind = 197;
                  jjCheckNAdd(4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_6(0x4000000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_6(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 190);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_5(0x4000000000000000L);
      default :
         return jjMoveNfa_5(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 190);
         break;
      default :
         break;
   }
   return jjStartNfa_5(0, 0L, 0L, active2);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 188;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(0, 1);
                  break;
               case 3:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 185)
                     kind = 185;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjCheckNAddStates(2, 4);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 185)
                     kind = 185;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 186)
                     kind = 186;
                  jjCheckNAdd(6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_7(0x6L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_7(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_7(active3, 0x4L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_7(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active3 & 0x4L) != 0L)
            return jjStopAtPos(2, 194);
         break;
      default :
         return 3;
   }
   return 3;
}
static final int[] jjnextStates = {
   2, 3, 2, 3, 6, 16, 21, 3, 4, 7, 8, 10, 13, 59, 60, 61, 
   63, 64, 66, 31, 35, 36, 37, 38, 6, 10, 11, 12, 13, 19, 20, 23, 
   24, 16, 17, 44, 45, 48, 49, 41, 42, 63, 64, 66, 70, 71, 73, 74, 
   77, 26, 29, 51, 54, 67, 68, 17, 22, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\50", "\54", "\51", null, null, "\173", "\173\173", "\175", "\175\175", 
"\44", "\44\44", "\75", "\74", "\74\57", "\76", "\57\76", "\42", "\47", 
"\170\161\165\145\162\171", "\145\156\143\157\144\151\156\147", "\166\145\162\163\151\157\156", 
"\155\157\144\165\154\145", "\156\141\155\145\163\160\141\143\145", "\73", "\144\145\143\154\141\162\145", 
"\142\157\165\156\144\141\162\171\55\163\160\141\143\145", "\160\162\145\163\145\162\166\145", "\163\164\162\151\160", 
"\144\145\146\141\165\154\164", "\143\157\154\154\141\164\151\157\156", "\142\141\163\145\55\165\162\151", 
"\143\157\156\163\164\162\165\143\164\151\157\156", "\157\162\144\145\162\151\156\147", "\157\162\144\145\162\145\144", 
"\165\156\157\162\144\145\162\145\144", "\157\162\144\145\162", "\145\155\160\164\171", 
"\147\162\145\141\164\145\163\164", "\154\145\141\163\164", 
"\143\157\160\171\55\156\141\155\145\163\160\141\143\145\163", "\156\157\55\160\162\145\163\145\162\166\145", "\151\156\150\145\162\151\164", 
"\156\157\55\151\156\150\145\162\151\164", "\144\145\143\151\155\141\154\55\146\157\162\155\141\164", 
"\144\145\143\151\155\141\154\55\163\145\160\141\162\141\164\157\162", "\147\162\157\165\160\151\156\147\55\163\145\160\141\162\141\164\157\162", 
"\151\156\146\151\156\151\164\171", "\155\151\156\165\163\55\163\151\147\156", "\160\116\141\116\50\51", 
"\160\145\162\143\145\156\164", "\160\145\162\55\155\151\154\154\145", 
"\172\145\162\157\55\144\151\147\151\164", "\144\151\147\151\164", 
"\160\141\164\164\145\162\156\55\163\145\160\141\162\141\164\157\162", "\151\155\160\157\162\164", "\163\143\150\145\155\141", "\141\164", 
"\145\154\145\155\145\156\164", "\146\165\156\143\164\151\157\156", "\45", "\166\141\162\151\141\142\154\145", 
"\72\75", "\145\170\164\145\162\156\141\154", "\143\157\156\164\145\170\164", 
"\151\164\145\155", "\141\163", "\157\160\164\151\157\156", "\146\157\162", "\151\156", 
"\141\154\154\157\167\151\156\147", "\154\145\164", "\164\165\155\142\154\151\156\147", 
"\167\151\156\144\157\167", "\163\154\151\144\151\156\147", "\163\164\141\162\164", "\167\150\145\156", 
"\157\156\154\171", "\145\156\144", "\160\162\145\166\151\157\165\163", "\156\145\170\164", 
"\143\157\165\156\164", "\167\150\145\162\145", "\147\162\157\165\160", "\142\171", 
"\163\164\141\142\154\145", "\141\163\143\145\156\144\151\156\147", 
"\144\145\163\143\145\156\144\151\156\147", "\162\145\164\165\162\156", "\163\157\155\145", "\145\166\145\162\171", 
"\163\141\164\151\163\146\151\145\163", "\163\167\151\164\143\150", "\143\141\163\145", 
"\164\171\160\145\163\167\151\164\143\150", "\174", "\151\146", "\164\150\145\156", "\145\154\163\145", "\164\162\171", 
"\143\141\164\143\150", "\157\162", "\141\156\144", "\164\157", "\53", "\55", "\52", "\144\151\166", 
"\151\144\151\166", "\155\157\144", "\165\156\151\157\156", 
"\151\156\164\145\162\163\145\143\164", "\145\170\143\145\160\164", "\151\156\163\164\141\156\143\145", "\157\146", 
"\164\162\145\141\164", "\143\141\163\164\141\142\154\145", "\143\141\163\164", "\41\75", "\74\75", 
"\76\75", "\145\161", "\156\145", "\154\164", "\154\145", "\147\164", "\147\145", 
"\151\163", "\74\74", "\76\76", "\166\141\154\151\144\141\164\145", "\164\171\160\145", 
"\154\141\170", "\163\164\162\151\143\164", "\57", "\57\57", "\143\150\151\154\144", "\72\72", 
"\144\145\163\143\145\156\144\141\156\164", "\141\164\164\162\151\142\165\164\145", "\163\145\154\146", 
"\144\145\163\143\145\156\144\141\156\164\55\157\162\55\163\145\154\146", "\146\157\154\154\157\167\151\156\147\55\163\151\142\154\151\156\147", 
"\146\157\154\154\157\167\151\156\147", "\100", "\160\141\162\145\156\164", "\141\156\143\145\163\164\157\162", 
"\160\162\145\143\145\144\151\156\147\55\163\151\142\154\151\156\147", "\160\162\145\143\145\144\151\156\147", 
"\141\156\143\145\163\164\157\162\55\157\162\55\163\145\154\146", "\56\56", null, null, "\133", "\135", "\56", "\77", 
"\144\157\143\165\155\145\156\164", "\164\145\170\164", "\143\157\155\155\145\156\164", 
"\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156", "\43", "\145\155\160\164\171\55\163\145\161\165\145\156\143\145", 
"\156\157\144\145", "\144\157\143\165\155\145\156\164\55\156\157\144\145", 
"\156\141\155\145\163\160\141\143\145\55\156\157\144\145", "\163\143\150\145\155\141\55\141\164\164\162\151\142\165\164\145", 
"\163\143\150\145\155\141\55\145\154\145\155\145\156\164", "\72", null, null, null, null, "\42\42", "\47\47", null, null, null, null, 
null, null, "\116\141\116", 
"\156\157\156\144\145\164\145\162\155\151\156\151\163\164\151\143", "\160\162\151\166\141\164\145", "\160\165\142\154\151\143", null, null, null, 
null, null, "\43\51", "\74\41\55\55", null, "\55\55", "\55\55\76", "\74\77", null, 
null, null, null, "\77\76", "\74\41\133\103\104\101\124\101\133", null, "\44", null, 
"\173", null, "\175", "\135\135\76", null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_ELEM", 
   "IN_QUOT", 
   "IN_APOS", 
   "IN_TAG", 
   "IN_PRAGMA1", 
   "IN_PRAGMA2", 
   "IN_DIR_COMMENT", 
   "IN_DIR_PI1", 
   "IN_DIR_PI2", 
   "IN_CDATA_SECTION", 
   "CDATA_AFTER_DLR", 
   "CDATA_AFTER_ID", 
   "CDATA_IN_WAQL", 
   "IN_COMMENT", 
   "IN_COMMENT2", 
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 6, -1, 0, 7, -1, -1, -1, 8, -1, -1, 9, -1, 
   -1, 10, -1, 11, 12, 13, -1, 10, -1, 14, 15, -1, -1, 0, 
};
static final long[] jjtoToken = {
   0xffffffffffffffefL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x1ffffL, 
};
static final long[] jjtoSkip = {
   0x10L, 0x0L, 0x0L, 0x200000L, 
};
static final long[] jjtoSpecial = {
   0x10L, 0x0L, 0x0L, 0x200000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 0x1e0000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[81];
private final int[] jjstateSet = new int[162];
private final StringBuffer jjimage = new StringBuffer();
private StringBuffer image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 81; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 16 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 189)
         {
            jjmatchedKind = 189;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 192)
         {
            jjmatchedKind = 192;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         break;
       case 9:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         if (jjmatchedPos == 0 && jjmatchedKind > 199)
         {
            jjmatchedKind = 199;
         }
         break;
       case 10:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         break;
       case 11:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_11();
         break;
       case 12:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_12();
         break;
       case 13:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_13();
         break;
       case 14:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_14();
         if (jjmatchedPos == 0 && jjmatchedKind > 211)
         {
            jjmatchedKind = 211;
         }
         break;
       case 15:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_15();
         if (jjmatchedPos == 0 && jjmatchedKind > 211)
         {
            jjmatchedKind = 211;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 210 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         commentNestingDepth++;
         break;
      case 212 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                         commentNestingDepth--; if(commentNestingDepth==0)SwitchTo(IN_COMMENT);
         break;
      default : 
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 191 :
        image.append(jjstrLiteralImages[191]);
        lengthOfMatch = jjstrLiteralImages[191].length();
                                                             beforeInDirComment=curLexState;
         break;
      case 194 :
        image.append(jjstrLiteralImages[194]);
        lengthOfMatch = jjstrLiteralImages[194].length();
                                                         SwitchTo(beforeInDirComment);
         break;
      case 195 :
        image.append(jjstrLiteralImages[195]);
        lengthOfMatch = jjstrLiteralImages[195].length();
                                                      beforeInDirPI=curLexState;
         break;
      case 200 :
        image.append(jjstrLiteralImages[200]);
        lengthOfMatch = jjstrLiteralImages[200].length();
                                                          SwitchTo(beforeInDirPI);
         break;
      case 201 :
        image.append(jjstrLiteralImages[201]);
        lengthOfMatch = jjstrLiteralImages[201].length();
                                                            beforeInCdata=curLexState;
         break;
      case 208 :
        image.append(jjstrLiteralImages[208]);
        lengthOfMatch = jjstrLiteralImages[208].length();
                                                             SwitchTo(beforeInCdata);
         break;
      default : 
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
