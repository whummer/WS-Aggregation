/*
 * Project 'WS-Aggregation':
 * http://www.infosys.tuwien.ac.at/prototype/WS-Aggregation/
 *
 * Copyright 2010-2012 Vienna University of Technology
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package at.ac.tuwien.infosys.aggr.waql;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 4;
  /** RegularExpression Id. */
  int DIGITS = 5;
  /** RegularExpression Id. */
  int T_CLB = 6;
  /** RegularExpression Id. */
  int T_CLB_CLB = 7;
  /** RegularExpression Id. */
  int T_CRB = 8;
  /** RegularExpression Id. */
  int T_CRB_CRB = 9;
  /** RegularExpression Id. */
  int T_DLR = 10;
  /** RegularExpression Id. */
  int T_DLR_DLR = 11;
  /** RegularExpression Id. */
  int T_EQ = 12;
  /** RegularExpression Id. */
  int T_LT = 13;
  /** RegularExpression Id. */
  int T_LT_SLSH = 14;
  /** RegularExpression Id. */
  int T_GT = 15;
  /** RegularExpression Id. */
  int T_SLSH_GT = 16;
  /** RegularExpression Id. */
  int T_QUOT = 17;
  /** RegularExpression Id. */
  int T_APOS = 18;
  /** RegularExpression Id. */
  int WILDCARD1 = 151;
  /** RegularExpression Id. */
  int WILDCARD2 = 152;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 169;
  /** RegularExpression Id. */
  int DOUBLE_LITERAL = 170;
  /** RegularExpression Id. */
  int STRING_LITERAL = 171;
  /** RegularExpression Id. */
  int PREDEFINED_ENTITY_REF = 172;
  /** RegularExpression Id. */
  int ESCAPE_QUOT = 173;
  /** RegularExpression Id. */
  int ESCAPE_APOS = 174;
  /** RegularExpression Id. */
  int CHAR_REF = 175;
  /** RegularExpression Id. */
  int S = 176;
  /** RegularExpression Id. */
  int ELEMENT_CONTENT_CHAR = 177;
  /** RegularExpression Id. */
  int QUOT_ATTR_CONTENT_CHAR = 178;
  /** RegularExpression Id. */
  int APOS_ATTR_CONTENT_CHAR = 179;
  /** RegularExpression Id. */
  int CDATA_CONTENT_CHAR = 180;
  /** RegularExpression Id. */
  int Q_NAME = 185;
  /** RegularExpression Id. */
  int NC_NAME = 186;
  /** RegularExpression Id. */
  int PRAGMA_START = 187;
  /** RegularExpression Id. */
  int PRAGMA_S = 188;
  /** RegularExpression Id. */
  int PRAGMA_CHAR = 189;
  /** RegularExpression Id. */
  int PRAGMA_END = 190;
  /** RegularExpression Id. */
  int DIR_COMMENT_START = 191;
  /** RegularExpression Id. */
  int DIR_COMMENT_CHAR = 192;
  /** RegularExpression Id. */
  int DIR_COMMENT_INVALID = 193;
  /** RegularExpression Id. */
  int DIR_COMMENT_END = 194;
  /** RegularExpression Id. */
  int DIR_PI_START = 195;
  /** RegularExpression Id. */
  int PI_TARGET_INVALID = 196;
  /** RegularExpression Id. */
  int PI_TARGET = 197;
  /** RegularExpression Id. */
  int DIR_PI_S = 198;
  /** RegularExpression Id. */
  int DIR_PI_CHAR = 199;
  /** RegularExpression Id. */
  int DIR_PI_END = 200;
  /** RegularExpression Id. */
  int CDATA_SECTION_START = 201;
  /** RegularExpression Id. */
  int CDATA_REGULAR_CHAR = 202;
  /** RegularExpression Id. */
  int CDATA_DLR = 203;
  /** RegularExpression Id. */
  int CDATA_ID_DIGITS = 204;
  /** RegularExpression Id. */
  int CDATA_WAQL_BR_OPEN = 205;
  /** RegularExpression Id. */
  int CDATA_WAQL_EXPR = 206;
  /** RegularExpression Id. */
  int CDATA_WAQL_BR_CLOSE = 207;
  /** RegularExpression Id. */
  int CDATA_SECTION_END = 208;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_ELEM = 1;
  /** Lexical state. */
  int IN_QUOT = 2;
  /** Lexical state. */
  int IN_APOS = 3;
  /** Lexical state. */
  int IN_TAG = 4;
  /** Lexical state. */
  int IN_PRAGMA1 = 5;
  /** Lexical state. */
  int IN_PRAGMA2 = 6;
  /** Lexical state. */
  int IN_DIR_COMMENT = 7;
  /** Lexical state. */
  int IN_DIR_PI1 = 8;
  /** Lexical state. */
  int IN_DIR_PI2 = 9;
  /** Lexical state. */
  int IN_CDATA_SECTION = 10;
  /** Lexical state. */
  int CDATA_AFTER_DLR = 11;
  /** Lexical state. */
  int CDATA_AFTER_ID = 12;
  /** Lexical state. */
  int CDATA_IN_WAQL = 13;
  /** Lexical state. */
  int IN_COMMENT = 14;
  /** Lexical state. */
  int IN_COMMENT2 = 15;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"(\"",
    "\",\"",
    "\")\"",
    "<WHITESPACE>",
    "<DIGITS>",
    "\"{\"",
    "\"{{\"",
    "\"}\"",
    "\"}}\"",
    "\"$\"",
    "\"$$\"",
    "\"=\"",
    "\"<\"",
    "\"</\"",
    "\">\"",
    "\"/>\"",
    "\"\\\"\"",
    "\"\\\'\"",
    "\"xquery\"",
    "\"encoding\"",
    "\"version\"",
    "\"module\"",
    "\"namespace\"",
    "\";\"",
    "\"declare\"",
    "\"boundary-space\"",
    "\"preserve\"",
    "\"strip\"",
    "\"default\"",
    "\"collation\"",
    "\"base-uri\"",
    "\"construction\"",
    "\"ordering\"",
    "\"ordered\"",
    "\"unordered\"",
    "\"order\"",
    "\"empty\"",
    "\"greatest\"",
    "\"least\"",
    "\"copy-namespaces\"",
    "\"no-preserve\"",
    "\"inherit\"",
    "\"no-inherit\"",
    "\"decimal-format\"",
    "\"decimal-separator\"",
    "\"grouping-separator\"",
    "\"infinity\"",
    "\"minus-sign\"",
    "\"pNaN()\"",
    "\"percent\"",
    "\"per-mille\"",
    "\"zero-digit\"",
    "\"digit\"",
    "\"pattern-separator\"",
    "\"import\"",
    "\"schema\"",
    "\"at\"",
    "\"element\"",
    "\"function\"",
    "\"%\"",
    "\"variable\"",
    "\":=\"",
    "\"external\"",
    "\"context\"",
    "\"item\"",
    "\"as\"",
    "\"option\"",
    "\"for\"",
    "\"in\"",
    "\"allowing\"",
    "\"let\"",
    "\"tumbling\"",
    "\"window\"",
    "\"sliding\"",
    "\"start\"",
    "\"when\"",
    "\"only\"",
    "\"end\"",
    "\"previous\"",
    "\"next\"",
    "\"count\"",
    "\"where\"",
    "\"group\"",
    "\"by\"",
    "\"stable\"",
    "\"ascending\"",
    "\"descending\"",
    "\"return\"",
    "\"some\"",
    "\"every\"",
    "\"satisfies\"",
    "\"switch\"",
    "\"case\"",
    "\"typeswitch\"",
    "\"|\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"try\"",
    "\"catch\"",
    "\"or\"",
    "\"and\"",
    "\"to\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"div\"",
    "\"idiv\"",
    "\"mod\"",
    "\"union\"",
    "\"intersect\"",
    "\"except\"",
    "\"instance\"",
    "\"of\"",
    "\"treat\"",
    "\"castable\"",
    "\"cast\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"eq\"",
    "\"ne\"",
    "\"lt\"",
    "\"le\"",
    "\"gt\"",
    "\"ge\"",
    "\"is\"",
    "\"<<\"",
    "\">>\"",
    "\"validate\"",
    "\"type\"",
    "\"lax\"",
    "\"strict\"",
    "\"/\"",
    "\"//\"",
    "\"child\"",
    "\"::\"",
    "\"descendant\"",
    "\"attribute\"",
    "\"self\"",
    "\"descendant-or-self\"",
    "\"following-sibling\"",
    "\"following\"",
    "\"@\"",
    "\"parent\"",
    "\"ancestor\"",
    "\"preceding-sibling\"",
    "\"preceding\"",
    "\"ancestor-or-self\"",
    "\"..\"",
    "<WILDCARD1>",
    "<WILDCARD2>",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\"?\"",
    "\"document\"",
    "\"text\"",
    "\"comment\"",
    "\"processing-instruction\"",
    "\"#\"",
    "\"empty-sequence\"",
    "\"node\"",
    "\"document-node\"",
    "\"namespace-node\"",
    "\"schema-attribute\"",
    "\"schema-element\"",
    "\":\"",
    "<DECIMAL_LITERAL>",
    "<DOUBLE_LITERAL>",
    "<STRING_LITERAL>",
    "<PREDEFINED_ENTITY_REF>",
    "\"\\\"\\\"\"",
    "\"\\\'\\\'\"",
    "<CHAR_REF>",
    "<S>",
    "<ELEMENT_CONTENT_CHAR>",
    "<QUOT_ATTR_CONTENT_CHAR>",
    "<APOS_ATTR_CONTENT_CHAR>",
    "<CDATA_CONTENT_CHAR>",
    "\"NaN\"",
    "\"nondeterministic\"",
    "\"private\"",
    "\"public\"",
    "<Q_NAME>",
    "<NC_NAME>",
    "<PRAGMA_START>",
    "<PRAGMA_S>",
    "<PRAGMA_CHAR>",
    "\"#)\"",
    "\"<!--\"",
    "<DIR_COMMENT_CHAR>",
    "\"--\"",
    "\"-->\"",
    "\"<?\"",
    "<PI_TARGET_INVALID>",
    "<PI_TARGET>",
    "<DIR_PI_S>",
    "<DIR_PI_CHAR>",
    "\"?>\"",
    "\"<![CDATA[\"",
    "<CDATA_REGULAR_CHAR>",
    "\"$\"",
    "<CDATA_ID_DIGITS>",
    "\"{\"",
    "<CDATA_WAQL_EXPR>",
    "\"}\"",
    "\"]]>\"",
    "\"(:\"",
    "\"(:\"",
    "<token of kind 211>",
    "\":)\"",
    "\":)\"",
  };

}
