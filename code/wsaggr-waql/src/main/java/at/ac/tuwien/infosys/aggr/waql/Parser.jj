/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./Parser.jj */
/*@egen*//*
 * Copyright (c)	2010 Michael Starzinger
 *					2011 Waldemar Hummer
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * things to replace from original EBNF:
 *	"'" 			--> <T_APOS>
 * 	pStringLiteral() 	--> <STRING_LITERAL>
 * 	pS() 			--> <S>
 *	pDecimalLiteral()	--> <DECIMAL_LITERAL>
 *	pDoubleLiteral()	--> <DOUBLE_LITERAL>
 *	pQuotAttrContentChar()	--> <QUOT_ATTR_CONTENT_CHAR>
 *	pAposAttrContentChar()	--> <APOS_ATTR_CONTENT_CHAR>
 *	pElementContentChar()	--> <ELEMENT_CONTENT_CHAR>
 *	pPITarget()		--> <PI_TARGET>
 * add LOOKAHEAD(n), where n is an integer, to:
 *	pModule(), pProlog(), pSetter(), pImport(), ... (see javacc compiler warnings for details)
 * add "{ nodeQueryBody = jjtThis; }" to pQueryBody()
 * add chgState(..) to 
 *	pEnclosedExpr(), pDirElemConstructor(), pDirAttributeValue()
 */

/*
 * First we define some global options for the generated tree parser to
 * suite our needs. The following is a short reasoning for the options.
 * -) STATIC: We need to have several instances of the parser that can
 *    work concurrently for different contexts.
 * -) TRACK_TOKENS: We need to reconstruct parts of the input and hence
 *    tracking which tokens belong to each AST node.
 */

options {
	STATIC = false;
	                    
}

/*
 * Second we define the actual parser class with all global and instance
 * variables we need.
 */

PARSER_BEGIN(Parser)
package at.ac.tuwien.infosys.aggr.waql;
import java.util.LinkedList;
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/
	/** The single reference to the parsed "QueryBody" node. */
	public SimpleNode nodeQueryBody;
	/** Table of all parsed "DataDependency" nodes. */
	public LinkedList<SimpleNode> tableDataDependency = new LinkedList<SimpleNode>();
	/** Table of all parsed "TemplateList" nodes. */
	public LinkedList<SimpleNode> tableTemplateList = new LinkedList<SimpleNode>();
	/** Table of all parsed "EscapeDollar" nodes. */
	public LinkedList<SimpleNode> tableEscapeDollar = new LinkedList<SimpleNode>();
	/** Types describing in which context a "WAQLExtension" is used. */
	public static enum UsageType { AS_EXPR, AS_TEXT }
	/** Changes the lexical state from within the parser. */
	private final int chgState(int newState) {
		int oldState = token_source.curLexState;
		token_source.SwitchTo(newState);
		return oldState;
	}
}
PARSER_END(Parser)

/*
 * The following rules represent the actual WAQL language constructs and
 * also contain the necessary code to attribute the AST nodes with enough
 * information for further compiler phases.
 */

public SimpleNode parse() : {/*@bgen(jjtree) parse */
  SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) parse */
                                 try {
/*@egen*/ pModule() <EOF>/*@bgen(jjtree)*/
                                                 {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
                                 } catch (Throwable jjte000) {
                                   if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte000;
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     throw (ParseException)jjte000;
                                   }
                                   throw (Error)jjte000;
                                 } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtn000.jjtSetLastToken(getToken(0));
                                   }
                                 }
/*@egen*/ }

public SimpleNode pDataDependency() : {/*@bgen(jjtree) pDataDependency */
        SimpleNode jjtn000 = new SimpleNode(JJTPDATADEPENDENCY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t = null;
}{/*@bgen(jjtree) pDataDependency */
        try {
/*@egen*/
	<T_DLR> ( t = <DIGITS> )? <T_CLB> pPathExpr() <T_CRB>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		Integer id = (t != null) ? Integer.parseInt(t.image) : null;
		jjtn000.jjtSetValue(id);
		tableDataDependency.addFirst(jjtn000);
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

public SimpleNode pPathExprCdata() : {/*@bgen(jjtree) pPathExprCdata */
  SimpleNode jjtn000 = new SimpleNode(JJTPPATHEXPRCDATA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}{/*@bgen(jjtree) pPathExprCdata */
        try {
/*@egen*/
	(<CDATA_WAQL_EXPR>)+/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
public SimpleNode pDataDependencyCdata() : {/*@bgen(jjtree) pDataDependencyCdata */
        SimpleNode jjtn000 = new SimpleNode(JJTPDATADEPENDENCYCDATA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t = null;
}{/*@bgen(jjtree) pDataDependencyCdata */
        try {
/*@egen*/
	(<CDATA_DLR> (t = <CDATA_ID_DIGITS>)? (<CDATA_WAQL_BR_OPEN>) pPathExprCdata() (<CDATA_WAQL_BR_CLOSE>))/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		Integer id = (t != null) ? Integer.parseInt(t.image) : null;
		jjtn000.jjtSetValue(id);
		tableDataDependency.addFirst(jjtn000);
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

public SimpleNode pTemplateList() : {/*@bgen(jjtree) pTemplateList */
        SimpleNode jjtn000 = new SimpleNode(JJTPTEMPLATELIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	Token t = null;
}{/*@bgen(jjtree) pTemplateList */
        try {
/*@egen*/
	<T_DLR> ( t = <DIGITS> )? "(" pExprSingle() ( "," pExprSingle() )* ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		Integer id = (t != null) ? Integer.parseInt(t.image) : null;
		jjtn000.jjtSetValue(id);
		tableTemplateList.add(jjtn000);
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

private void pEscapeDollar() : {/*@bgen(jjtree) pEscapeDollar */
  SimpleNode jjtn000 = new SimpleNode(JJTPESCAPEDOLLAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}{/*@bgen(jjtree) pEscapeDollar */
        try {
/*@egen*/
	<T_DLR_DLR>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		tableEscapeDollar.add(jjtn000);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

private void pWAQLExtension(UsageType usage) : {/*@bgen(jjtree) pWAQLExtension */
        SimpleNode jjtn000 = new SimpleNode(JJTPWAQLEXTENSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	int oldState = chgState(DEFAULT);
}{/*@bgen(jjtree) pWAQLExtension */
        try {
/*@egen*/
	(LOOKAHEAD(3) pDataDependency() | pTemplateList())/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
		jjtn000.jjtSetValue(usage);
		chgState(oldState);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/*
 * The following tokens will be used by the lexical analyzer to match
 * certain characters, character sequences or character classes. Note that
 * we use lexical states to distinguish between different contexts. Also
 * note that we use the "SPECIAL_TOKEN" keyword instead of the "SKIP"
 * keyword to ignore whitespace characters because we need to be able to
 * reconstruct the input after parsing.
 */

SPECIAL_TOKEN : { < WHITESPACE : <S> > }
TOKEN : { < DIGITS : (["0"-"9"])+ > }

<DEFAULT,IN_ELEM,IN_QUOT,IN_APOS> TOKEN : { < T_CLB     : "{"  > }
<IN_ELEM,IN_QUOT,IN_APOS>         TOKEN : { < T_CLB_CLB : "{{" > }
<DEFAULT,IN_ELEM,IN_QUOT,IN_APOS> TOKEN : { < T_CRB     : "}"  > }
<IN_ELEM,IN_QUOT,IN_APOS>         TOKEN : { < T_CRB_CRB : "}}" > }
<DEFAULT,IN_ELEM,IN_QUOT,IN_APOS> TOKEN : { < T_DLR     : "$"  > }
<IN_ELEM,IN_QUOT,IN_APOS>         TOKEN : { < T_DLR_DLR : "$$" > }
<DEFAULT,IN_TAG>                  TOKEN : { < T_EQ      : "="  > }
<DEFAULT,IN_ELEM>                 TOKEN : { < T_LT      : "<"  > }
<IN_ELEM>                         TOKEN : { < T_LT_SLSH : "</" > }
<DEFAULT,IN_TAG>                  TOKEN : { < T_GT      : ">"  > }
<IN_TAG>                          TOKEN : { < T_SLSH_GT : "/>" > }
<IN_QUOT,IN_TAG>                  TOKEN : { < T_QUOT    : "\"" > }
<IN_APOS,IN_TAG>                  TOKEN : { < T_APOS    : "'"  > }

/*
 * The following rules were taken from the XQuery specification published
 * as a W3C Recommendation and automaticaly converted into a valid JavaCC
 * syntax with some hand-crafted adaptions to make them compile.
 *
 * Based on:
 *   http://www.w3.org/TR/2007/REC-xquery-20070123/
 *   http://www.w3.org/TR/2008/REC-xml-20081126/
 *   http://www.w3.org/TR/2009/REC-xml-names-20091208/
 */

/*[1]*/ private void pModule() : {/*@bgen(jjtree) pModule */
  SimpleNode jjtn000 = new SimpleNode(JJTPMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pModule */
                                      try {
/*@egen*/ (LOOKAHEAD(2) pVersionDecl())? (LOOKAHEAD(2) pLibraryModule() | pMainModule())/*@bgen(jjtree)*/
                                      } catch (Throwable jjte000) {
                                        if (jjtc000) {
                                          jjtree.clearNodeScope(jjtn000);
                                          jjtc000 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte000 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte000;
                                        }
                                        if (jjte000 instanceof ParseException) {
                                          throw (ParseException)jjte000;
                                        }
                                        throw (Error)jjte000;
                                      } finally {
                                        if (jjtc000) {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtn000.jjtSetLastToken(getToken(0));
                                        }
                                      }
/*@egen*/ }
/*[2]*/ private void pVersionDecl() : {/*@bgen(jjtree) pVersionDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPVERSIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pVersionDecl */
                                           try {
/*@egen*/ "xquery" (("encoding" <STRING_LITERAL>) | ("version" <STRING_LITERAL> ("encoding" <STRING_LITERAL>)?)) pSeparator()/*@bgen(jjtree)*/
                                           } catch (Throwable jjte000) {
                                             if (jjtc000) {
                                               jjtree.clearNodeScope(jjtn000);
                                               jjtc000 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte000 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte000;
                                             }
                                             if (jjte000 instanceof ParseException) {
                                               throw (ParseException)jjte000;
                                             }
                                             throw (Error)jjte000;
                                           } finally {
                                             if (jjtc000) {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtn000.jjtSetLastToken(getToken(0));
                                             }
                                           }
/*@egen*/ }
/*[3]*/ private void pMainModule() : {/*@bgen(jjtree) pMainModule */
  SimpleNode jjtn000 = new SimpleNode(JJTPMAINMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pMainModule */
                                          try {
/*@egen*/ pProlog() pQueryBody()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[4]*/ private void pLibraryModule() : {/*@bgen(jjtree) pLibraryModule */
  SimpleNode jjtn000 = new SimpleNode(JJTPLIBRARYMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pLibraryModule */
                                             try {
/*@egen*/ pModuleDecl() pProlog()/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[5]*/ private void pModuleDecl() : {/*@bgen(jjtree) pModuleDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPMODULEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pModuleDecl */
                                          try {
/*@egen*/ "module" "namespace" pNCName() "=" pURILiteral() pSeparator()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[6]*/ private void pProlog() : {/*@bgen(jjtree) pProlog */
  SimpleNode jjtn000 = new SimpleNode(JJTPPROLOG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pProlog */
                                      try {
/*@egen*/ (LOOKAHEAD(2) (LOOKAHEAD(3) pDefaultNamespaceDecl() | LOOKAHEAD(2) pSetter() | LOOKAHEAD(2) pNamespaceDecl() | pImport()) pSeparator())* (LOOKAHEAD(2) (LOOKAHEAD(2) pContextItemDecl() | LOOKAHEAD(2) pAnnotatedDecl() | LOOKAHEAD(2) pOptionDecl()) pSeparator())*/*@bgen(jjtree)*/
                                      } catch (Throwable jjte000) {
                                        if (jjtc000) {
                                          jjtree.clearNodeScope(jjtn000);
                                          jjtc000 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte000 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte000;
                                        }
                                        if (jjte000 instanceof ParseException) {
                                          throw (ParseException)jjte000;
                                        }
                                        throw (Error)jjte000;
                                      } finally {
                                        if (jjtc000) {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtn000.jjtSetLastToken(getToken(0));
                                        }
                                      }
/*@egen*/ }
/*[7]*/ private void pSeparator() : {/*@bgen(jjtree) pSeparator */
  SimpleNode jjtn000 = new SimpleNode(JJTPSEPARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pSeparator */
                                         try {
/*@egen*/ ";"/*@bgen(jjtree)*/
                                         } finally {
                                           if (jjtc000) {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtn000.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/ }
/*[8]*/ private void pSetter() : {/*@bgen(jjtree) pSetter */
  SimpleNode jjtn000 = new SimpleNode(JJTPSETTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pSetter */
                                      try {
/*@egen*/ LOOKAHEAD(2) pBoundarySpaceDecl() | LOOKAHEAD(3) pDefaultCollationDecl() | LOOKAHEAD(2) pBaseURIDecl() | LOOKAHEAD(2) pConstructionDecl() | LOOKAHEAD(2) pOrderingModeDecl() | LOOKAHEAD(2) pEmptyOrderDecl() | LOOKAHEAD(2) pCopyNamespacesDecl() | LOOKAHEAD(2) pDecimalFormatDecl()/*@bgen(jjtree)*/
                                      } catch (Throwable jjte000) {
                                        if (jjtc000) {
                                          jjtree.clearNodeScope(jjtn000);
                                          jjtc000 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte000 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte000;
                                        }
                                        if (jjte000 instanceof ParseException) {
                                          throw (ParseException)jjte000;
                                        }
                                        throw (Error)jjte000;
                                      } finally {
                                        if (jjtc000) {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtn000.jjtSetLastToken(getToken(0));
                                        }
                                      }
/*@egen*/ }
/*[9]*/ private void pBoundarySpaceDecl() : {/*@bgen(jjtree) pBoundarySpaceDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPBOUNDARYSPACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pBoundarySpaceDecl */
                                                 try {
/*@egen*/ "declare" "boundary-space" ("preserve" | "strip")/*@bgen(jjtree)*/
                                                 } finally {
                                                   if (jjtc000) {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtn000.jjtSetLastToken(getToken(0));
                                                   }
                                                 }
/*@egen*/ }
/*[10]*/ private void pDefaultCollationDecl() : {/*@bgen(jjtree) pDefaultCollationDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPDEFAULTCOLLATIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pDefaultCollationDecl */
                                                     try {
/*@egen*/ "declare" "default" "collation" pURILiteral()/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte000) {
                                                       if (jjtc000) {
                                                         jjtree.clearNodeScope(jjtn000);
                                                         jjtc000 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte000 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte000;
                                                       }
                                                       if (jjte000 instanceof ParseException) {
                                                         throw (ParseException)jjte000;
                                                       }
                                                       throw (Error)jjte000;
                                                     } finally {
                                                       if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/ }
/*[11]*/ private void pBaseURIDecl() : {/*@bgen(jjtree) pBaseURIDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPBASEURIDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pBaseURIDecl */
                                            try {
/*@egen*/ "declare" "base-uri" pURILiteral()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte000) {
                                              if (jjtc000) {
                                                jjtree.clearNodeScope(jjtn000);
                                                jjtc000 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte000 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte000;
                                              }
                                              if (jjte000 instanceof ParseException) {
                                                throw (ParseException)jjte000;
                                              }
                                              throw (Error)jjte000;
                                            } finally {
                                              if (jjtc000) {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtn000.jjtSetLastToken(getToken(0));
                                              }
                                            }
/*@egen*/ }
/*[12]*/ private void pConstructionDecl() : {/*@bgen(jjtree) pConstructionDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPCONSTRUCTIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pConstructionDecl */
                                                 try {
/*@egen*/ "declare" "construction" ("strip" | "preserve")/*@bgen(jjtree)*/
                                                 } finally {
                                                   if (jjtc000) {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtn000.jjtSetLastToken(getToken(0));
                                                   }
                                                 }
/*@egen*/ }
/*[13]*/ private void pOrderingModeDecl() : {/*@bgen(jjtree) pOrderingModeDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPORDERINGMODEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pOrderingModeDecl */
                                                 try {
/*@egen*/ "declare" "ordering" ("ordered" | "unordered")/*@bgen(jjtree)*/
                                                 } finally {
                                                   if (jjtc000) {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtn000.jjtSetLastToken(getToken(0));
                                                   }
                                                 }
/*@egen*/ }
/*[14]*/ private void pEmptyOrderDecl() : {/*@bgen(jjtree) pEmptyOrderDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPEMPTYORDERDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pEmptyOrderDecl */
                                               try {
/*@egen*/ "declare" "default" "order" "empty" ("greatest" | "least")/*@bgen(jjtree)*/
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[15]*/ private void pCopyNamespacesDecl() : {/*@bgen(jjtree) pCopyNamespacesDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPCOPYNAMESPACESDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCopyNamespacesDecl */
                                                   try {
/*@egen*/ "declare" "copy-namespaces" pPreserveMode() "," pInheritMode()/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte000) {
                                                     if (jjtc000) {
                                                       jjtree.clearNodeScope(jjtn000);
                                                       jjtc000 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte000 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte000;
                                                     }
                                                     if (jjte000 instanceof ParseException) {
                                                       throw (ParseException)jjte000;
                                                     }
                                                     throw (Error)jjte000;
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[16]*/ private void pPreserveMode() : {/*@bgen(jjtree) pPreserveMode */
  SimpleNode jjtn000 = new SimpleNode(JJTPPRESERVEMODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pPreserveMode */
                                             try {
/*@egen*/ "preserve" | "no-preserve"/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[17]*/ private void pInheritMode() : {/*@bgen(jjtree) pInheritMode */
  SimpleNode jjtn000 = new SimpleNode(JJTPINHERITMODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pInheritMode */
                                            try {
/*@egen*/ "inherit" | "no-inherit"/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc000) {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtn000.jjtSetLastToken(getToken(0));
                                              }
                                            }
/*@egen*/ }
/*[18]*/ private void pDecimalFormatDecl() : {/*@bgen(jjtree) pDecimalFormatDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPDECIMALFORMATDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pDecimalFormatDecl */
                                                  try {
/*@egen*/ "declare" (("decimal-format" pEQName()) | ("default" "decimal-format")) (pDFPropertyName() "=" <STRING_LITERAL>)*/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte000) {
                                                    if (jjtc000) {
                                                      jjtree.clearNodeScope(jjtn000);
                                                      jjtc000 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte000 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte000;
                                                    }
                                                    if (jjte000 instanceof ParseException) {
                                                      throw (ParseException)jjte000;
                                                    }
                                                    throw (Error)jjte000;
                                                  } finally {
                                                    if (jjtc000) {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtn000.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/ }
/*[19]*/ private void pDFPropertyName() : {/*@bgen(jjtree) pDFPropertyName */
  SimpleNode jjtn000 = new SimpleNode(JJTPDFPROPERTYNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pDFPropertyName */
                                               try {
/*@egen*/ "decimal-separator" | "grouping-separator" | "infinity" | "minus-sign" | "pNaN()" | "percent" | "per-mille" | "zero-digit" | "digit" | "pattern-separator"/*@bgen(jjtree)*/
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[20]*/ private void pImport() : {/*@bgen(jjtree) pImport */
  SimpleNode jjtn000 = new SimpleNode(JJTPIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pImport */
                                       try {
/*@egen*/ LOOKAHEAD(2) pSchemaImport() | pModuleImport()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtn000.jjtSetLastToken(getToken(0));
                                         }
                                       }
/*@egen*/ }
/*[21]*/ private void pSchemaImport() : {/*@bgen(jjtree) pSchemaImport */
  SimpleNode jjtn000 = new SimpleNode(JJTPSCHEMAIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pSchemaImport */
                                             try {
/*@egen*/ "import" "schema" (pSchemaPrefix())? pURILiteral() ("at" pURILiteral() ("," pURILiteral())*)?/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[22]*/ private void pSchemaPrefix() : {/*@bgen(jjtree) pSchemaPrefix */
  SimpleNode jjtn000 = new SimpleNode(JJTPSCHEMAPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pSchemaPrefix */
                                             try {
/*@egen*/ ("namespace" pNCName() "=") | ("default" "element" "namespace")/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[23]*/ private void pModuleImport() : {/*@bgen(jjtree) pModuleImport */
  SimpleNode jjtn000 = new SimpleNode(JJTPMODULEIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pModuleImport */
                                             try {
/*@egen*/ "import" "module" ("namespace" pNCName() "=")? pURILiteral() ("at" pURILiteral() ("," pURILiteral())*)?/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[24]*/ private void pNamespaceDecl() : {/*@bgen(jjtree) pNamespaceDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPNAMESPACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pNamespaceDecl */
                                              try {
/*@egen*/ "declare" "namespace" pNCName() "=" pURILiteral()/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[25]*/ private void pDefaultNamespaceDecl() : {/*@bgen(jjtree) pDefaultNamespaceDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPDEFAULTNAMESPACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pDefaultNamespaceDecl */
                                                     try {
/*@egen*/ "declare" "default" ("element" | "function") "namespace" pURILiteral()/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte000) {
                                                       if (jjtc000) {
                                                         jjtree.clearNodeScope(jjtn000);
                                                         jjtc000 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte000 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte000;
                                                       }
                                                       if (jjte000 instanceof ParseException) {
                                                         throw (ParseException)jjte000;
                                                       }
                                                       throw (Error)jjte000;
                                                     } finally {
                                                       if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/ }
/*[26]*/ private void pAnnotatedDecl() : {/*@bgen(jjtree) pAnnotatedDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPANNOTATEDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAnnotatedDecl */
                                              try {
/*@egen*/ "declare" (pAnnotation())* (pVarDecl() | pFunctionDecl())/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[27]*/ private void pAnnotation() : {/*@bgen(jjtree) pAnnotation */
  SimpleNode jjtn000 = new SimpleNode(JJTPANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAnnotation */
                                           try {
/*@egen*/ "%" pEQName() ("(" pLiteral() ("," pLiteral())* ")")?/*@bgen(jjtree)*/
                                           } catch (Throwable jjte000) {
                                             if (jjtc000) {
                                               jjtree.clearNodeScope(jjtn000);
                                               jjtc000 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte000 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte000;
                                             }
                                             if (jjte000 instanceof ParseException) {
                                               throw (ParseException)jjte000;
                                             }
                                             throw (Error)jjte000;
                                           } finally {
                                             if (jjtc000) {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtn000.jjtSetLastToken(getToken(0));
                                             }
                                           }
/*@egen*/ }
/*[28]*/ private void pVarDecl() : {/*@bgen(jjtree) pVarDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pVarDecl */
                                        try {
/*@egen*/ "variable" "$" pVarName() (pTypeDeclaration())? ((":=" pVarValue()) | ("external" (":=" pVarDefaultValue())?))/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtn000.jjtSetLastToken(getToken(0));
                                          }
                                        }
/*@egen*/ }
/*[29]*/ private void pVarValue() : {/*@bgen(jjtree) pVarValue */
  SimpleNode jjtn000 = new SimpleNode(JJTPVARVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pVarValue */
                                         try {
/*@egen*/ pExprSingle()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte000) {
                                           if (jjtc000) {
                                             jjtree.clearNodeScope(jjtn000);
                                             jjtc000 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte000 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte000;
                                           }
                                           if (jjte000 instanceof ParseException) {
                                             throw (ParseException)jjte000;
                                           }
                                           throw (Error)jjte000;
                                         } finally {
                                           if (jjtc000) {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtn000.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/ }
/*[30]*/ private void pVarDefaultValue() : {/*@bgen(jjtree) pVarDefaultValue */
  SimpleNode jjtn000 = new SimpleNode(JJTPVARDEFAULTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pVarDefaultValue */
                                                try {
/*@egen*/ pExprSingle()/*@bgen(jjtree)*/
                                                } catch (Throwable jjte000) {
                                                  if (jjtc000) {
                                                    jjtree.clearNodeScope(jjtn000);
                                                    jjtc000 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte000 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte000;
                                                  }
                                                  if (jjte000 instanceof ParseException) {
                                                    throw (ParseException)jjte000;
                                                  }
                                                  throw (Error)jjte000;
                                                } finally {
                                                  if (jjtc000) {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtn000.jjtSetLastToken(getToken(0));
                                                  }
                                                }
/*@egen*/ }
/*[31]*/ private void pContextItemDecl() : {/*@bgen(jjtree) pContextItemDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPCONTEXTITEMDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pContextItemDecl */
                                                try {
/*@egen*/ "declare" "context" "item" ("as" pItemType())? ((":=" pVarValue()) | ("external" (":=" pVarDefaultValue())?))/*@bgen(jjtree)*/
                                                } catch (Throwable jjte000) {
                                                  if (jjtc000) {
                                                    jjtree.clearNodeScope(jjtn000);
                                                    jjtc000 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte000 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte000;
                                                  }
                                                  if (jjte000 instanceof ParseException) {
                                                    throw (ParseException)jjte000;
                                                  }
                                                  throw (Error)jjte000;
                                                } finally {
                                                  if (jjtc000) {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtn000.jjtSetLastToken(getToken(0));
                                                  }
                                                }
/*@egen*/ }
/*[32]*/ private void pFunctionDecl() : {/*@bgen(jjtree) pFunctionDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPFUNCTIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pFunctionDecl */
                                             try {
/*@egen*/ "function" pEQName() "(" (pParamList())? ")" ("as" pSequenceType())? (pFunctionBody() | "external")/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ /* xgc: reserved-function-namespXQ()30 */ }
/*[33]*/ private void pParamList() : {/*@bgen(jjtree) pParamList */
  SimpleNode jjtn000 = new SimpleNode(JJTPPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pParamList */
                                          try {
/*@egen*/ pParam() ("," pParam())*/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[34]*/ private void pParam() : {/*@bgen(jjtree) pParam */
  SimpleNode jjtn000 = new SimpleNode(JJTPPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pParam */
                                      try {
/*@egen*/ "$" pEQName() (pTypeDeclaration())?/*@bgen(jjtree)*/
                                      } catch (Throwable jjte000) {
                                        if (jjtc000) {
                                          jjtree.clearNodeScope(jjtn000);
                                          jjtc000 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte000 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte000;
                                        }
                                        if (jjte000 instanceof ParseException) {
                                          throw (ParseException)jjte000;
                                        }
                                        throw (Error)jjte000;
                                      } finally {
                                        if (jjtc000) {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtn000.jjtSetLastToken(getToken(0));
                                        }
                                      }
/*@egen*/ }
/*[35]*/ private void pFunctionBody() : {/*@bgen(jjtree) pFunctionBody */
  SimpleNode jjtn000 = new SimpleNode(JJTPFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pFunctionBody */
                                             try {
/*@egen*/ pEnclosedExpr()/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[36]*/ private void pEnclosedExpr() : {/*@bgen(jjtree) pEnclosedExpr */
                                          SimpleNode jjtn000 = new SimpleNode(JJTPENCLOSEDEXPR);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);
                                          jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ int s; } {/*@bgen(jjtree) pEnclosedExpr */
                                                     try {
/*@egen*/ <T_CLB> { s=chgState(DEFAULT); } pExpr() <T_CRB>/*@bgen(jjtree)*/
                                                                                                      {
                                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                                        jjtc000 = false;
                                                                                                        jjtn000.jjtSetLastToken(getToken(0));
                                                                                                      }
/*@egen*/ { chgState(s); }/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte000) {
                                                       if (jjtc000) {
                                                         jjtree.clearNodeScope(jjtn000);
                                                         jjtc000 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte000 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte000;
                                                       }
                                                       if (jjte000 instanceof ParseException) {
                                                         throw (ParseException)jjte000;
                                                       }
                                                       throw (Error)jjte000;
                                                     } finally {
                                                       if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/ }
/*[37]*/ private void pOptionDecl() : {/*@bgen(jjtree) pOptionDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTPOPTIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pOptionDecl */
                                           try {
/*@egen*/ "declare" "option" pEQName() <STRING_LITERAL>/*@bgen(jjtree)*/
                                           } catch (Throwable jjte000) {
                                             if (jjtc000) {
                                               jjtree.clearNodeScope(jjtn000);
                                               jjtc000 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte000 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte000;
                                             }
                                             if (jjte000 instanceof ParseException) {
                                               throw (ParseException)jjte000;
                                             }
                                             throw (Error)jjte000;
                                           } finally {
                                             if (jjtc000) {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtn000.jjtSetLastToken(getToken(0));
                                             }
                                           }
/*@egen*/ }
/*[38]*/ private void pQueryBody() : {/*@bgen(jjtree) pQueryBody */
  SimpleNode jjtn000 = new SimpleNode(JJTPQUERYBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pQueryBody */
                                          try {
/*@egen*/ pExpr()/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                    jjtn000.jjtSetLastToken(getToken(0));
                                                  }
/*@egen*/ { nodeQueryBody = jjtn000; }/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[39]*/ private void pExpr() : {/*@bgen(jjtree) pExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pExpr */
                                     try {
/*@egen*/ pExprSingle() ("," pExprSingle())*/*@bgen(jjtree)*/
                                     } catch (Throwable jjte000) {
                                       if (jjtc000) {
                                         jjtree.clearNodeScope(jjtn000);
                                         jjtc000 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte000 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte000;
                                       }
                                       if (jjte000 instanceof ParseException) {
                                         throw (ParseException)jjte000;
                                       }
                                       throw (Error)jjte000;
                                     } finally {
                                       if (jjtc000) {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtn000.jjtSetLastToken(getToken(0));
                                       }
                                     }
/*@egen*/ }
/*[40]*/ private void pExprSingle() : {/*@bgen(jjtree) pExprSingle */
  SimpleNode jjtn000 = new SimpleNode(JJTPEXPRSINGLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pExprSingle */
                                           try {
/*@egen*/ LOOKAHEAD(2) pFLWORExpr() | LOOKAHEAD(3) pQuantifiedExpr() | LOOKAHEAD(3) pSwitchExpr() | LOOKAHEAD(3) pTypeswitchExpr() | LOOKAHEAD(2) pIfExpr() | LOOKAHEAD(2) pTryCatchExpr() | LOOKAHEAD(2) pOrExpr()/*@bgen(jjtree)*/
                                           } catch (Throwable jjte000) {
                                             if (jjtc000) {
                                               jjtree.clearNodeScope(jjtn000);
                                               jjtc000 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte000 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte000;
                                             }
                                             if (jjte000 instanceof ParseException) {
                                               throw (ParseException)jjte000;
                                             }
                                             throw (Error)jjte000;
                                           } finally {
                                             if (jjtc000) {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtn000.jjtSetLastToken(getToken(0));
                                             }
                                           }
/*@egen*/ }
/*[41]*/ private void pFLWORExpr() : {/*@bgen(jjtree) pFLWORExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPFLWOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pFLWORExpr */
                                          try {
/*@egen*/ pInitialClause() (pIntermediateClause())* pReturnClause()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[42]*/ private void pInitialClause() : {/*@bgen(jjtree) pInitialClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPINITIALCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pInitialClause */
                                              try {
/*@egen*/ LOOKAHEAD(2) pForClause() | pLetClause() | pWindowClause()/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[43]*/ private void pIntermediateClause() : {/*@bgen(jjtree) pIntermediateClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPINTERMEDIATECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pIntermediateClause */
                                                   try {
/*@egen*/ pInitialClause() | pWhereClause() | pGroupByClause() | pOrderByClause() | pCountClause()/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte000) {
                                                     if (jjtc000) {
                                                       jjtree.clearNodeScope(jjtn000);
                                                       jjtc000 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte000 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte000;
                                                     }
                                                     if (jjte000 instanceof ParseException) {
                                                       throw (ParseException)jjte000;
                                                     }
                                                     throw (Error)jjte000;
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[44]*/ private void pForClause() : {/*@bgen(jjtree) pForClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPFORCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pForClause */
                                          try {
/*@egen*/ "for" pForBinding() ("," pForBinding())*/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[45]*/ private void pForBinding() : {/*@bgen(jjtree) pForBinding */
  SimpleNode jjtn000 = new SimpleNode(JJTPFORBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pForBinding */
                                           try {
/*@egen*/ "$" pVarName() (pTypeDeclaration())? (pAllowingEmpty())? (pPositionalVar())? "in" pExprSingle()/*@bgen(jjtree)*/
                                           } catch (Throwable jjte000) {
                                             if (jjtc000) {
                                               jjtree.clearNodeScope(jjtn000);
                                               jjtc000 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte000 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte000;
                                             }
                                             if (jjte000 instanceof ParseException) {
                                               throw (ParseException)jjte000;
                                             }
                                             throw (Error)jjte000;
                                           } finally {
                                             if (jjtc000) {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtn000.jjtSetLastToken(getToken(0));
                                             }
                                           }
/*@egen*/ }
/*[46]*/ private void pAllowingEmpty() : {/*@bgen(jjtree) pAllowingEmpty */
  SimpleNode jjtn000 = new SimpleNode(JJTPALLOWINGEMPTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAllowingEmpty */
                                              try {
/*@egen*/ "allowing" "empty"/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[47]*/ private void pPositionalVar() : {/*@bgen(jjtree) pPositionalVar */
  SimpleNode jjtn000 = new SimpleNode(JJTPPOSITIONALVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pPositionalVar */
                                              try {
/*@egen*/ "at" "$" pVarName()/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[48]*/ private void pLetClause() : {/*@bgen(jjtree) pLetClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPLETCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pLetClause */
                                          try {
/*@egen*/ "let" pLetBinding() ("," pLetBinding())*/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[49]*/ private void pLetBinding() : {/*@bgen(jjtree) pLetBinding */
  SimpleNode jjtn000 = new SimpleNode(JJTPLETBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pLetBinding */
                                           try {
/*@egen*/ "$" pVarName() (pTypeDeclaration())? ":=" pExprSingle()/*@bgen(jjtree)*/
                                           } catch (Throwable jjte000) {
                                             if (jjtc000) {
                                               jjtree.clearNodeScope(jjtn000);
                                               jjtc000 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte000 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte000;
                                             }
                                             if (jjte000 instanceof ParseException) {
                                               throw (ParseException)jjte000;
                                             }
                                             throw (Error)jjte000;
                                           } finally {
                                             if (jjtc000) {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtn000.jjtSetLastToken(getToken(0));
                                             }
                                           }
/*@egen*/ }
/*[50]*/ private void pWindowClause() : {/*@bgen(jjtree) pWindowClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPWINDOWCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pWindowClause */
                                             try {
/*@egen*/ "for" (pTumblingWindowClause() | pSlidingWindowClause())/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[51]*/ private void pTumblingWindowClause() : {/*@bgen(jjtree) pTumblingWindowClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPTUMBLINGWINDOWCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pTumblingWindowClause */
                                                     try {
/*@egen*/ "tumbling" "window" "$" pVarName() (pTypeDeclaration())? "in" pExprSingle() pWindowStartCondition() (pWindowEndCondition())?/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte000) {
                                                       if (jjtc000) {
                                                         jjtree.clearNodeScope(jjtn000);
                                                         jjtc000 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte000 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte000;
                                                       }
                                                       if (jjte000 instanceof ParseException) {
                                                         throw (ParseException)jjte000;
                                                       }
                                                       throw (Error)jjte000;
                                                     } finally {
                                                       if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/ }
/*[52]*/ private void pSlidingWindowClause() : {/*@bgen(jjtree) pSlidingWindowClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPSLIDINGWINDOWCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pSlidingWindowClause */
                                                    try {
/*@egen*/ "sliding" "window" "$" pVarName() (pTypeDeclaration())? "in" pExprSingle() pWindowStartCondition() pWindowEndCondition()/*@bgen(jjtree)*/
                                                    } catch (Throwable jjte000) {
                                                      if (jjtc000) {
                                                        jjtree.clearNodeScope(jjtn000);
                                                        jjtc000 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte000 instanceof RuntimeException) {
                                                        throw (RuntimeException)jjte000;
                                                      }
                                                      if (jjte000 instanceof ParseException) {
                                                        throw (ParseException)jjte000;
                                                      }
                                                      throw (Error)jjte000;
                                                    } finally {
                                                      if (jjtc000) {
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtn000.jjtSetLastToken(getToken(0));
                                                      }
                                                    }
/*@egen*/ }
/*[53]*/ private void pWindowStartCondition() : {/*@bgen(jjtree) pWindowStartCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTPWINDOWSTARTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pWindowStartCondition */
                                                     try {
/*@egen*/ "start" pWindowVars() "when" pExprSingle()/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte000) {
                                                       if (jjtc000) {
                                                         jjtree.clearNodeScope(jjtn000);
                                                         jjtc000 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte000 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte000;
                                                       }
                                                       if (jjte000 instanceof ParseException) {
                                                         throw (ParseException)jjte000;
                                                       }
                                                       throw (Error)jjte000;
                                                     } finally {
                                                       if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/ }
/*[54]*/ private void pWindowEndCondition() : {/*@bgen(jjtree) pWindowEndCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTPWINDOWENDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pWindowEndCondition */
                                                   try {
/*@egen*/ ("only")? "end" pWindowVars() "when" pExprSingle()/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte000) {
                                                     if (jjtc000) {
                                                       jjtree.clearNodeScope(jjtn000);
                                                       jjtc000 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte000 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte000;
                                                     }
                                                     if (jjte000 instanceof ParseException) {
                                                       throw (ParseException)jjte000;
                                                     }
                                                     throw (Error)jjte000;
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[55]*/ private void pWindowVars() : {/*@bgen(jjtree) pWindowVars */
  SimpleNode jjtn000 = new SimpleNode(JJTPWINDOWVARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pWindowVars */
                                           try {
/*@egen*/ ("$" pCurrentItem())? (pPositionalVar())? ("previous" "$" pPreviousItem())? ("next" "$" pNextItem())?/*@bgen(jjtree)*/
                                           } catch (Throwable jjte000) {
                                             if (jjtc000) {
                                               jjtree.clearNodeScope(jjtn000);
                                               jjtc000 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte000 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte000;
                                             }
                                             if (jjte000 instanceof ParseException) {
                                               throw (ParseException)jjte000;
                                             }
                                             throw (Error)jjte000;
                                           } finally {
                                             if (jjtc000) {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtn000.jjtSetLastToken(getToken(0));
                                             }
                                           }
/*@egen*/ }
/*[56]*/ private void pCurrentItem() : {/*@bgen(jjtree) pCurrentItem */
  SimpleNode jjtn000 = new SimpleNode(JJTPCURRENTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCurrentItem */
                                            try {
/*@egen*/ pEQName()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte000) {
                                              if (jjtc000) {
                                                jjtree.clearNodeScope(jjtn000);
                                                jjtc000 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte000 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte000;
                                              }
                                              if (jjte000 instanceof ParseException) {
                                                throw (ParseException)jjte000;
                                              }
                                              throw (Error)jjte000;
                                            } finally {
                                              if (jjtc000) {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtn000.jjtSetLastToken(getToken(0));
                                              }
                                            }
/*@egen*/ }
/*[57]*/ private void pPreviousItem() : {/*@bgen(jjtree) pPreviousItem */
  SimpleNode jjtn000 = new SimpleNode(JJTPPREVIOUSITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pPreviousItem */
                                             try {
/*@egen*/ pEQName()/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[58]*/ private void pNextItem() : {/*@bgen(jjtree) pNextItem */
  SimpleNode jjtn000 = new SimpleNode(JJTPNEXTITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pNextItem */
                                         try {
/*@egen*/ pEQName()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte000) {
                                           if (jjtc000) {
                                             jjtree.clearNodeScope(jjtn000);
                                             jjtc000 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte000 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte000;
                                           }
                                           if (jjte000 instanceof ParseException) {
                                             throw (ParseException)jjte000;
                                           }
                                           throw (Error)jjte000;
                                         } finally {
                                           if (jjtc000) {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtn000.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/ }
/*[59]*/ private void pCountClause() : {/*@bgen(jjtree) pCountClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPCOUNTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCountClause */
                                            try {
/*@egen*/ "count" "$" pVarName()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte000) {
                                              if (jjtc000) {
                                                jjtree.clearNodeScope(jjtn000);
                                                jjtc000 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte000 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte000;
                                              }
                                              if (jjte000 instanceof ParseException) {
                                                throw (ParseException)jjte000;
                                              }
                                              throw (Error)jjte000;
                                            } finally {
                                              if (jjtc000) {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtn000.jjtSetLastToken(getToken(0));
                                              }
                                            }
/*@egen*/ }
/*[60]*/ private void pWhereClause() : {/*@bgen(jjtree) pWhereClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pWhereClause */
                                            try {
/*@egen*/ "where" pExprSingle()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte000) {
                                              if (jjtc000) {
                                                jjtree.clearNodeScope(jjtn000);
                                                jjtc000 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte000 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte000;
                                              }
                                              if (jjte000 instanceof ParseException) {
                                                throw (ParseException)jjte000;
                                              }
                                              throw (Error)jjte000;
                                            } finally {
                                              if (jjtc000) {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtn000.jjtSetLastToken(getToken(0));
                                              }
                                            }
/*@egen*/ }
/*[61]*/ private void pGroupByClause() : {/*@bgen(jjtree) pGroupByClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pGroupByClause */
                                              try {
/*@egen*/ "group" "by" pGroupingSpecList()/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[62]*/ private void pGroupingSpecList() : {/*@bgen(jjtree) pGroupingSpecList */
  SimpleNode jjtn000 = new SimpleNode(JJTPGROUPINGSPECLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pGroupingSpecList */
                                                 try {
/*@egen*/ pGroupingSpec() ("," pGroupingSpec())*/*@bgen(jjtree)*/
                                                 } catch (Throwable jjte000) {
                                                   if (jjtc000) {
                                                     jjtree.clearNodeScope(jjtn000);
                                                     jjtc000 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte000 instanceof RuntimeException) {
                                                     throw (RuntimeException)jjte000;
                                                   }
                                                   if (jjte000 instanceof ParseException) {
                                                     throw (ParseException)jjte000;
                                                   }
                                                   throw (Error)jjte000;
                                                 } finally {
                                                   if (jjtc000) {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtn000.jjtSetLastToken(getToken(0));
                                                   }
                                                 }
/*@egen*/ }
/*[63]*/ private void pGroupingSpec() : {/*@bgen(jjtree) pGroupingSpec */
  SimpleNode jjtn000 = new SimpleNode(JJTPGROUPINGSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pGroupingSpec */
                                             try {
/*@egen*/ "$" pVarName() ("collation" pURILiteral())?/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[64]*/ private void pOrderByClause() : {/*@bgen(jjtree) pOrderByClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pOrderByClause */
                                              try {
/*@egen*/ (("order" "by") | ("stable" "order" "by")) pOrderSpecList()/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[65]*/ private void pOrderSpecList() : {/*@bgen(jjtree) pOrderSpecList */
  SimpleNode jjtn000 = new SimpleNode(JJTPORDERSPECLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pOrderSpecList */
                                              try {
/*@egen*/ pOrderSpec() ("," pOrderSpec())*/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[66]*/ private void pOrderSpec() : {/*@bgen(jjtree) pOrderSpec */
  SimpleNode jjtn000 = new SimpleNode(JJTPORDERSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pOrderSpec */
                                          try {
/*@egen*/ pExprSingle() pOrderModifier()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[67]*/ private void pOrderModifier() : {/*@bgen(jjtree) pOrderModifier */
  SimpleNode jjtn000 = new SimpleNode(JJTPORDERMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pOrderModifier */
                                              try {
/*@egen*/ ("ascending" | "descending")? ("empty" ("greatest" | "least"))? ("collation" pURILiteral())?/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[68]*/ private void pReturnClause() : {/*@bgen(jjtree) pReturnClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPRETURNCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pReturnClause */
                                             try {
/*@egen*/ "return" pExprSingle()/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[69]*/ private void pQuantifiedExpr() : {/*@bgen(jjtree) pQuantifiedExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPQUANTIFIEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pQuantifiedExpr */
                                               try {
/*@egen*/ ("some" | "every") "$" pVarName() (pTypeDeclaration())? "in" pExprSingle() ("," "$" pVarName() (pTypeDeclaration())? "in" pExprSingle())* "satisfies" pExprSingle()/*@bgen(jjtree)*/
                                               } catch (Throwable jjte000) {
                                                 if (jjtc000) {
                                                   jjtree.clearNodeScope(jjtn000);
                                                   jjtc000 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte000 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte000;
                                                 }
                                                 if (jjte000 instanceof ParseException) {
                                                   throw (ParseException)jjte000;
                                                 }
                                                 throw (Error)jjte000;
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[70]*/ private void pSwitchExpr() : {/*@bgen(jjtree) pSwitchExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPSWITCHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pSwitchExpr */
                                           try {
/*@egen*/ "switch" "(" pExpr() ")" (pSwitchCaseClause())+ "default" "return" pExprSingle()/*@bgen(jjtree)*/
                                           } catch (Throwable jjte000) {
                                             if (jjtc000) {
                                               jjtree.clearNodeScope(jjtn000);
                                               jjtc000 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte000 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte000;
                                             }
                                             if (jjte000 instanceof ParseException) {
                                               throw (ParseException)jjte000;
                                             }
                                             throw (Error)jjte000;
                                           } finally {
                                             if (jjtc000) {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtn000.jjtSetLastToken(getToken(0));
                                             }
                                           }
/*@egen*/ }
/*[71]*/ private void pSwitchCaseClause() : {/*@bgen(jjtree) pSwitchCaseClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPSWITCHCASECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pSwitchCaseClause */
                                                 try {
/*@egen*/ ("case" pSwitchCaseOperand())+ "return" pExprSingle()/*@bgen(jjtree)*/
                                                 } catch (Throwable jjte000) {
                                                   if (jjtc000) {
                                                     jjtree.clearNodeScope(jjtn000);
                                                     jjtc000 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte000 instanceof RuntimeException) {
                                                     throw (RuntimeException)jjte000;
                                                   }
                                                   if (jjte000 instanceof ParseException) {
                                                     throw (ParseException)jjte000;
                                                   }
                                                   throw (Error)jjte000;
                                                 } finally {
                                                   if (jjtc000) {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtn000.jjtSetLastToken(getToken(0));
                                                   }
                                                 }
/*@egen*/ }
/*[72]*/ private void pSwitchCaseOperand() : {/*@bgen(jjtree) pSwitchCaseOperand */
  SimpleNode jjtn000 = new SimpleNode(JJTPSWITCHCASEOPERAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pSwitchCaseOperand */
                                                  try {
/*@egen*/ pExprSingle()/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte000) {
                                                    if (jjtc000) {
                                                      jjtree.clearNodeScope(jjtn000);
                                                      jjtc000 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte000 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte000;
                                                    }
                                                    if (jjte000 instanceof ParseException) {
                                                      throw (ParseException)jjte000;
                                                    }
                                                    throw (Error)jjte000;
                                                  } finally {
                                                    if (jjtc000) {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtn000.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/ }
/*[73]*/ private void pTypeswitchExpr() : {/*@bgen(jjtree) pTypeswitchExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPTYPESWITCHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pTypeswitchExpr */
                                               try {
/*@egen*/ "typeswitch" "(" pExpr() ")" (pCaseClause())+ "default" ("$" pVarName())? "return" pExprSingle()/*@bgen(jjtree)*/
                                               } catch (Throwable jjte000) {
                                                 if (jjtc000) {
                                                   jjtree.clearNodeScope(jjtn000);
                                                   jjtc000 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte000 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte000;
                                                 }
                                                 if (jjte000 instanceof ParseException) {
                                                   throw (ParseException)jjte000;
                                                 }
                                                 throw (Error)jjte000;
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[74]*/ private void pCaseClause() : {/*@bgen(jjtree) pCaseClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPCASECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCaseClause */
                                           try {
/*@egen*/ "case" ("$" pVarName() "as")? pSequenceTypeUnion() "return" pExprSingle()/*@bgen(jjtree)*/
                                           } catch (Throwable jjte000) {
                                             if (jjtc000) {
                                               jjtree.clearNodeScope(jjtn000);
                                               jjtc000 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte000 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte000;
                                             }
                                             if (jjte000 instanceof ParseException) {
                                               throw (ParseException)jjte000;
                                             }
                                             throw (Error)jjte000;
                                           } finally {
                                             if (jjtc000) {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtn000.jjtSetLastToken(getToken(0));
                                             }
                                           }
/*@egen*/ }
/*[75]*/ private void pSequenceTypeUnion() : {/*@bgen(jjtree) pSequenceTypeUnion */
  SimpleNode jjtn000 = new SimpleNode(JJTPSEQUENCETYPEUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pSequenceTypeUnion */
                                                  try {
/*@egen*/ pSequenceType() ("|" pSequenceType())*/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte000) {
                                                    if (jjtc000) {
                                                      jjtree.clearNodeScope(jjtn000);
                                                      jjtc000 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte000 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte000;
                                                    }
                                                    if (jjte000 instanceof ParseException) {
                                                      throw (ParseException)jjte000;
                                                    }
                                                    throw (Error)jjte000;
                                                  } finally {
                                                    if (jjtc000) {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtn000.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/ }
/*[76]*/ private void pIfExpr() : {/*@bgen(jjtree) pIfExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPIFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pIfExpr */
                                       try {
/*@egen*/ "if" "(" pExpr() ")" "then" pExprSingle() "else" pExprSingle()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtn000.jjtSetLastToken(getToken(0));
                                         }
                                       }
/*@egen*/ }
/*[77]*/ private void pTryCatchExpr() : {/*@bgen(jjtree) pTryCatchExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPTRYCATCHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pTryCatchExpr */
                                             try {
/*@egen*/ pTryClause() (pCatchClause())+/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[78]*/ private void pTryClause() : {/*@bgen(jjtree) pTryClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPTRYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pTryClause */
                                          try {
/*@egen*/ "try" "{" pTryTargetExpr() "}"/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[79]*/ private void pTryTargetExpr() : {/*@bgen(jjtree) pTryTargetExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPTRYTARGETEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pTryTargetExpr */
                                              try {
/*@egen*/ pExpr()/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[80]*/ private void pCatchClause() : {/*@bgen(jjtree) pCatchClause */
  SimpleNode jjtn000 = new SimpleNode(JJTPCATCHCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCatchClause */
                                            try {
/*@egen*/ "catch" pCatchErrorList() (pCatchVars())? "{" pExpr() "}"/*@bgen(jjtree)*/
                                            } catch (Throwable jjte000) {
                                              if (jjtc000) {
                                                jjtree.clearNodeScope(jjtn000);
                                                jjtc000 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte000 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte000;
                                              }
                                              if (jjte000 instanceof ParseException) {
                                                throw (ParseException)jjte000;
                                              }
                                              throw (Error)jjte000;
                                            } finally {
                                              if (jjtc000) {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtn000.jjtSetLastToken(getToken(0));
                                              }
                                            }
/*@egen*/ }
/*[81]*/ private void pCatchErrorList() : {/*@bgen(jjtree) pCatchErrorList */
  SimpleNode jjtn000 = new SimpleNode(JJTPCATCHERRORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCatchErrorList */
                                               try {
/*@egen*/ pNameTest() ("|" pNameTest())*/*@bgen(jjtree)*/
                                               } catch (Throwable jjte000) {
                                                 if (jjtc000) {
                                                   jjtree.clearNodeScope(jjtn000);
                                                   jjtc000 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte000 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte000;
                                                 }
                                                 if (jjte000 instanceof ParseException) {
                                                   throw (ParseException)jjte000;
                                                 }
                                                 throw (Error)jjte000;
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[82]*/ private void pCatchVars() : {/*@bgen(jjtree) pCatchVars */
  SimpleNode jjtn000 = new SimpleNode(JJTPCATCHVARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCatchVars */
                                          try {
/*@egen*/ "(" pCatchErrorCode() ("," pCatchErrorDesc() ("," pCatchErrorVal())?)? ")"/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[83]*/ private void pCatchErrorCode() : {/*@bgen(jjtree) pCatchErrorCode */
  SimpleNode jjtn000 = new SimpleNode(JJTPCATCHERRORCODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCatchErrorCode */
                                               try {
/*@egen*/ "$" pVarName()/*@bgen(jjtree)*/
                                               } catch (Throwable jjte000) {
                                                 if (jjtc000) {
                                                   jjtree.clearNodeScope(jjtn000);
                                                   jjtc000 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte000 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte000;
                                                 }
                                                 if (jjte000 instanceof ParseException) {
                                                   throw (ParseException)jjte000;
                                                 }
                                                 throw (Error)jjte000;
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[84]*/ private void pCatchErrorDesc() : {/*@bgen(jjtree) pCatchErrorDesc */
  SimpleNode jjtn000 = new SimpleNode(JJTPCATCHERRORDESC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCatchErrorDesc */
                                               try {
/*@egen*/ "$" pVarName()/*@bgen(jjtree)*/
                                               } catch (Throwable jjte000) {
                                                 if (jjtc000) {
                                                   jjtree.clearNodeScope(jjtn000);
                                                   jjtc000 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte000 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte000;
                                                 }
                                                 if (jjte000 instanceof ParseException) {
                                                   throw (ParseException)jjte000;
                                                 }
                                                 throw (Error)jjte000;
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[85]*/ private void pCatchErrorVal() : {/*@bgen(jjtree) pCatchErrorVal */
  SimpleNode jjtn000 = new SimpleNode(JJTPCATCHERRORVAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCatchErrorVal */
                                              try {
/*@egen*/ "$" pVarName()/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[86]*/ private void pOrExpr() : {/*@bgen(jjtree) pOrExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pOrExpr */
                                       try {
/*@egen*/ pAndExpr() ( "or" pAndExpr() )*/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtn000.jjtSetLastToken(getToken(0));
                                         }
                                       }
/*@egen*/ }
/*[87]*/ private void pAndExpr() : {/*@bgen(jjtree) pAndExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAndExpr */
                                        try {
/*@egen*/ pComparisonExpr() ( "and" pComparisonExpr() )*/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtn000.jjtSetLastToken(getToken(0));
                                          }
                                        }
/*@egen*/ }
/*[88]*/ private void pComparisonExpr() : {/*@bgen(jjtree) pComparisonExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPCOMPARISONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pComparisonExpr */
                                               try {
/*@egen*/ pRangeExpr() ( (pValueComp() | pGeneralComp() | pNodeComp()) pRangeExpr() )?/*@bgen(jjtree)*/
                                               } catch (Throwable jjte000) {
                                                 if (jjtc000) {
                                                   jjtree.clearNodeScope(jjtn000);
                                                   jjtc000 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte000 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte000;
                                                 }
                                                 if (jjte000 instanceof ParseException) {
                                                   throw (ParseException)jjte000;
                                                 }
                                                 throw (Error)jjte000;
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[89]*/ private void pRangeExpr() : {/*@bgen(jjtree) pRangeExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPRANGEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pRangeExpr */
                                          try {
/*@egen*/ pAdditiveExpr() ( "to" pAdditiveExpr() )?/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[90]*/ private void pAdditiveExpr() : {/*@bgen(jjtree) pAdditiveExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPADDITIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAdditiveExpr */
                                             try {
/*@egen*/ pMultiplicativeExpr() ( ("+" | "-") pMultiplicativeExpr() )*/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[91]*/ private void pMultiplicativeExpr() : {/*@bgen(jjtree) pMultiplicativeExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPMULTIPLICATIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pMultiplicativeExpr */
                                                   try {
/*@egen*/ pUnionExpr() ( ("*" | "div" | "idiv" | "mod") pUnionExpr() )*/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte000) {
                                                     if (jjtc000) {
                                                       jjtree.clearNodeScope(jjtn000);
                                                       jjtc000 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte000 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte000;
                                                     }
                                                     if (jjte000 instanceof ParseException) {
                                                       throw (ParseException)jjte000;
                                                     }
                                                     throw (Error)jjte000;
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[92]*/ private void pUnionExpr() : {/*@bgen(jjtree) pUnionExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPUNIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pUnionExpr */
                                          try {
/*@egen*/ pIntersectExceptExpr() ( ("union" | "|") pIntersectExceptExpr() )*/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[93]*/ private void pIntersectExceptExpr() : {/*@bgen(jjtree) pIntersectExceptExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPINTERSECTEXCEPTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pIntersectExceptExpr */
                                                    try {
/*@egen*/ pInstanceofExpr() ( ("intersect" | "except") pInstanceofExpr() )*/*@bgen(jjtree)*/
                                                    } catch (Throwable jjte000) {
                                                      if (jjtc000) {
                                                        jjtree.clearNodeScope(jjtn000);
                                                        jjtc000 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte000 instanceof RuntimeException) {
                                                        throw (RuntimeException)jjte000;
                                                      }
                                                      if (jjte000 instanceof ParseException) {
                                                        throw (ParseException)jjte000;
                                                      }
                                                      throw (Error)jjte000;
                                                    } finally {
                                                      if (jjtc000) {
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtn000.jjtSetLastToken(getToken(0));
                                                      }
                                                    }
/*@egen*/ }
/*[94]*/ private void pInstanceofExpr() : {/*@bgen(jjtree) pInstanceofExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPINSTANCEOFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pInstanceofExpr */
                                               try {
/*@egen*/ pTreatExpr() ( "instance" "of" pSequenceType() )?/*@bgen(jjtree)*/
                                               } catch (Throwable jjte000) {
                                                 if (jjtc000) {
                                                   jjtree.clearNodeScope(jjtn000);
                                                   jjtc000 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte000 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte000;
                                                 }
                                                 if (jjte000 instanceof ParseException) {
                                                   throw (ParseException)jjte000;
                                                 }
                                                 throw (Error)jjte000;
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[95]*/ private void pTreatExpr() : {/*@bgen(jjtree) pTreatExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPTREATEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pTreatExpr */
                                          try {
/*@egen*/ pCastableExpr() ( "treat" "as" pSequenceType() )?/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[96]*/ private void pCastableExpr() : {/*@bgen(jjtree) pCastableExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPCASTABLEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCastableExpr */
                                             try {
/*@egen*/ pCastExpr() ( "castable" "as" pSingleType() )?/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[97]*/ private void pCastExpr() : {/*@bgen(jjtree) pCastExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPCASTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCastExpr */
                                         try {
/*@egen*/ pUnaryExpr() ( "cast" "as" pSingleType() )?/*@bgen(jjtree)*/
                                         } catch (Throwable jjte000) {
                                           if (jjtc000) {
                                             jjtree.clearNodeScope(jjtn000);
                                             jjtc000 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte000 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte000;
                                           }
                                           if (jjte000 instanceof ParseException) {
                                             throw (ParseException)jjte000;
                                           }
                                           throw (Error)jjte000;
                                         } finally {
                                           if (jjtc000) {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtn000.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/ }
/*[98]*/ private void pUnaryExpr() : {/*@bgen(jjtree) pUnaryExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPUNARYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pUnaryExpr */
                                          try {
/*@egen*/ ("-" | "+")* pValueExpr()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[99]*/ private void pValueExpr() : {/*@bgen(jjtree) pValueExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPVALUEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pValueExpr */
                                          try {
/*@egen*/ LOOKAHEAD(2) pValidateExpr() | pPathExpr() | pExtensionExpr()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[100]*/ private void pGeneralComp() : {/*@bgen(jjtree) pGeneralComp */
  SimpleNode jjtn000 = new SimpleNode(JJTPGENERALCOMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pGeneralComp */
                                             try {
/*@egen*/ "=" | "!=" | "<" | "<=" | ">" | ">="/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[101]*/ private void pValueComp() : {/*@bgen(jjtree) pValueComp */
  SimpleNode jjtn000 = new SimpleNode(JJTPVALUECOMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pValueComp */
                                           try {
/*@egen*/ "eq" | "ne" | "lt" | "le" | "gt" | "ge"/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc000) {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtn000.jjtSetLastToken(getToken(0));
                                             }
                                           }
/*@egen*/ }
/*[102]*/ private void pNodeComp() : {/*@bgen(jjtree) pNodeComp */
  SimpleNode jjtn000 = new SimpleNode(JJTPNODECOMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pNodeComp */
                                          try {
/*@egen*/ "is" | "<<" | ">>"/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[103]*/ private void pValidateExpr() : {/*@bgen(jjtree) pValidateExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPVALIDATEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pValidateExpr */
                                              try {
/*@egen*/ "validate" (pValidationMode() | ("type" pTypeName()))? "{" pExpr() "}"/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[104]*/ private void pValidationMode() : {/*@bgen(jjtree) pValidationMode */
  SimpleNode jjtn000 = new SimpleNode(JJTPVALIDATIONMODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pValidationMode */
                                                try {
/*@egen*/ "lax" | "strict"/*@bgen(jjtree)*/
                                                } finally {
                                                  if (jjtc000) {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtn000.jjtSetLastToken(getToken(0));
                                                  }
                                                }
/*@egen*/ }
/*[105]*/ private void pExtensionExpr() : {/*@bgen(jjtree) pExtensionExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPEXTENSIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pExtensionExpr */
                                               try {
/*@egen*/ (pPragma())+ <T_CLB> (pExpr())? <T_CRB>/*@bgen(jjtree)*/
                                               } catch (Throwable jjte000) {
                                                 if (jjtc000) {
                                                   jjtree.clearNodeScope(jjtn000);
                                                   jjtc000 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte000 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte000;
                                                 }
                                                 if (jjte000 instanceof ParseException) {
                                                   throw (ParseException)jjte000;
                                                 }
                                                 throw (Error)jjte000;
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[106]*/ private void pPragma() : {/*@bgen(jjtree) pPragma */
  SimpleNode jjtn000 = new SimpleNode(JJTPPRAGMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pPragma */
                                        try {
/*@egen*/ <PRAGMA_START> pQName() (<PRAGMA_S> (<PRAGMA_CHAR>)*)? <PRAGMA_END>/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtn000.jjtSetLastToken(getToken(0));
                                          }
                                        }
/*@egen*/ }
/*[107]*/ // See below for special "PragmaContents" handling.
/*[108]*/ private void pPathExpr() : {/*@bgen(jjtree) pPathExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPPATHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pPathExpr */
                                          try {
/*@egen*/ ("/" (LOOKAHEAD(2) pRelativePathExpr())?) | ("//" pRelativePathExpr()) | pRelativePathExpr()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ /* xgc: leading-lone-slashpXQ()30 */ }
/*[109]*/ private void pRelativePathExpr() : {/*@bgen(jjtree) pRelativePathExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPRELATIVEPATHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pRelativePathExpr */
                                                  try {
/*@egen*/ pStepExpr() (("/" | "//") pStepExpr())*/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte000) {
                                                    if (jjtc000) {
                                                      jjtree.clearNodeScope(jjtn000);
                                                      jjtc000 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte000 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte000;
                                                    }
                                                    if (jjte000 instanceof ParseException) {
                                                      throw (ParseException)jjte000;
                                                    }
                                                    throw (Error)jjte000;
                                                  } finally {
                                                    if (jjtc000) {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtn000.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/ }
/*[110]*/ private void pStepExpr() : {/*@bgen(jjtree) pStepExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPSTEPEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pStepExpr */
                                          try {
/*@egen*/ LOOKAHEAD(2) pPostfixExpr() | pAxisStep()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[111]*/ private void pAxisStep() : {/*@bgen(jjtree) pAxisStep */
  SimpleNode jjtn000 = new SimpleNode(JJTPAXISSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAxisStep */
                                          try {
/*@egen*/ (LOOKAHEAD(2) pReverseStep() | pForwardStep()) pPredicateList()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[112]*/ private void pForwardStep() : {/*@bgen(jjtree) pForwardStep */
  SimpleNode jjtn000 = new SimpleNode(JJTPFORWARDSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pForwardStep */
                                             try {
/*@egen*/ LOOKAHEAD(2) (pForwardAxis() pNodeTest()) | pAbbrevForwardStep()/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[113]*/ private void pForwardAxis() : {/*@bgen(jjtree) pForwardAxis */
  SimpleNode jjtn000 = new SimpleNode(JJTPFORWARDAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pForwardAxis */
                                             try {
/*@egen*/ ("child" "::") | ("descendant" "::") | ("attribute" "::") | ("self" "::") | ("descendant-or-self" "::") | ("following-sibling" "::") | ("following" "::")/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[114]*/ private void pAbbrevForwardStep() : {/*@bgen(jjtree) pAbbrevForwardStep */
  SimpleNode jjtn000 = new SimpleNode(JJTPABBREVFORWARDSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAbbrevForwardStep */
                                                   try {
/*@egen*/ ("@")? pNodeTest()/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte000) {
                                                     if (jjtc000) {
                                                       jjtree.clearNodeScope(jjtn000);
                                                       jjtc000 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte000 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte000;
                                                     }
                                                     if (jjte000 instanceof ParseException) {
                                                       throw (ParseException)jjte000;
                                                     }
                                                     throw (Error)jjte000;
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[115]*/ private void pReverseStep() : {/*@bgen(jjtree) pReverseStep */
  SimpleNode jjtn000 = new SimpleNode(JJTPREVERSESTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pReverseStep */
                                             try {
/*@egen*/ (pReverseAxis() pNodeTest()) | pAbbrevReverseStep()/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[116]*/ private void pReverseAxis() : {/*@bgen(jjtree) pReverseAxis */
  SimpleNode jjtn000 = new SimpleNode(JJTPREVERSEAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pReverseAxis */
                                             try {
/*@egen*/ ("parent" "::") | ("ancestor" "::") | ("preceding-sibling" "::") | ("preceding" "::") | ("ancestor-or-self" "::")/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[117]*/ private void pAbbrevReverseStep() : {/*@bgen(jjtree) pAbbrevReverseStep */
  SimpleNode jjtn000 = new SimpleNode(JJTPABBREVREVERSESTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAbbrevReverseStep */
                                                   try {
/*@egen*/ ".."/*@bgen(jjtree)*/
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[118]*/ private void pNodeTest() : {/*@bgen(jjtree) pNodeTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPNODETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pNodeTest */
                                          try {
/*@egen*/ LOOKAHEAD(2) pKindTest() | pNameTest()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[119]*/ private void pNameTest() : {/*@bgen(jjtree) pNameTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPNAMETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pNameTest */
                                          try {
/*@egen*/ pEQName() | pWildcard()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[120] private void pWildcard() : {} { "*" | (pNCName() ":" "*") | ("*" ":" pNCName()) } */
/*[120]*/ private void pWildcard() : {/*@bgen(jjtree) pWildcard */
  SimpleNode jjtn000 = new SimpleNode(JJTPWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pWildcard */
                                          try {
/*@egen*/ "*" | < WILDCARD1 : <NC_NAME> ":" "*" > | < WILDCARD2 : "*" ":" <NC_NAME> >/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[121]*/ private void pPostfixExpr() : {/*@bgen(jjtree) pPostfixExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPPOSTFIXEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pPostfixExpr */
                                             try {
/*@egen*/ pPrimaryExpr() (pPredicate() | pArgumentList())*/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[122]*/ private void pArgumentList() : {/*@bgen(jjtree) pArgumentList */
  SimpleNode jjtn000 = new SimpleNode(JJTPARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pArgumentList */
                                              try {
/*@egen*/ "(" (pArgument() ("," pArgument())*)? ")"/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[123]*/ private void pPredicateList() : {/*@bgen(jjtree) pPredicateList */
  SimpleNode jjtn000 = new SimpleNode(JJTPPREDICATELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pPredicateList */
                                               try {
/*@egen*/ (pPredicate())*/*@bgen(jjtree)*/
                                               } catch (Throwable jjte000) {
                                                 if (jjtc000) {
                                                   jjtree.clearNodeScope(jjtn000);
                                                   jjtc000 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte000 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte000;
                                                 }
                                                 if (jjte000 instanceof ParseException) {
                                                   throw (ParseException)jjte000;
                                                 }
                                                 throw (Error)jjte000;
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[124]*/ private void pPredicate() : {/*@bgen(jjtree) pPredicate */
  SimpleNode jjtn000 = new SimpleNode(JJTPPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pPredicate */
                                           try {
/*@egen*/ "[" pExpr() "]"/*@bgen(jjtree)*/
                                           } catch (Throwable jjte000) {
                                             if (jjtc000) {
                                               jjtree.clearNodeScope(jjtn000);
                                               jjtc000 = false;
                                             } else {
                                               jjtree.popNode();
                                             }
                                             if (jjte000 instanceof RuntimeException) {
                                               throw (RuntimeException)jjte000;
                                             }
                                             if (jjte000 instanceof ParseException) {
                                               throw (ParseException)jjte000;
                                             }
                                             throw (Error)jjte000;
                                           } finally {
                                             if (jjtc000) {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtn000.jjtSetLastToken(getToken(0));
                                             }
                                           }
/*@egen*/ }
/*[125]*/ // See below for extended "PrimaryExpr" rule.
/*[126]*/ private void pLiteral() : {/*@bgen(jjtree) pLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTPLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pLiteral */
                                         try {
/*@egen*/ pNumericLiteral() | <STRING_LITERAL>/*@bgen(jjtree)*/
                                         } catch (Throwable jjte000) {
                                           if (jjtc000) {
                                             jjtree.clearNodeScope(jjtn000);
                                             jjtc000 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte000 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte000;
                                           }
                                           if (jjte000 instanceof ParseException) {
                                             throw (ParseException)jjte000;
                                           }
                                           throw (Error)jjte000;
                                         } finally {
                                           if (jjtc000) {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtn000.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/ }
/*[127]*/ private void pNumericLiteral() : {/*@bgen(jjtree) pNumericLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTPNUMERICLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pNumericLiteral */
                                                try {
/*@egen*/ pIntegerLiteral() | <DECIMAL_LITERAL> | <DOUBLE_LITERAL>/*@bgen(jjtree)*/
                                                } catch (Throwable jjte000) {
                                                  if (jjtc000) {
                                                    jjtree.clearNodeScope(jjtn000);
                                                    jjtc000 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte000 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte000;
                                                  }
                                                  if (jjte000 instanceof ParseException) {
                                                    throw (ParseException)jjte000;
                                                  }
                                                  throw (Error)jjte000;
                                                } finally {
                                                  if (jjtc000) {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtn000.jjtSetLastToken(getToken(0));
                                                  }
                                                }
/*@egen*/ }
/*[128]*/ private void pVarRef() : {/*@bgen(jjtree) pVarRef */
  SimpleNode jjtn000 = new SimpleNode(JJTPVARREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pVarRef */
                                        try {
/*@egen*/ "$" pVarName()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtn000.jjtSetLastToken(getToken(0));
                                          }
                                        }
/*@egen*/ }
/*[129]*/ private void pVarName() : {/*@bgen(jjtree) pVarName */
  SimpleNode jjtn000 = new SimpleNode(JJTPVARNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pVarName */
                                         try {
/*@egen*/ pEQName()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte000) {
                                           if (jjtc000) {
                                             jjtree.clearNodeScope(jjtn000);
                                             jjtc000 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte000 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte000;
                                           }
                                           if (jjte000 instanceof ParseException) {
                                             throw (ParseException)jjte000;
                                           }
                                           throw (Error)jjte000;
                                         } finally {
                                           if (jjtc000) {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtn000.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/ }
/*[130]*/ private void pParenthesizedExpr() : {/*@bgen(jjtree) pParenthesizedExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPPARENTHESIZEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pParenthesizedExpr */
                                                   try {
/*@egen*/ "(" (pExpr())? ")"/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte000) {
                                                     if (jjtc000) {
                                                       jjtree.clearNodeScope(jjtn000);
                                                       jjtc000 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte000 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte000;
                                                     }
                                                     if (jjte000 instanceof ParseException) {
                                                       throw (ParseException)jjte000;
                                                     }
                                                     throw (Error)jjte000;
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[131]*/ private void pContextItemExpr() : {/*@bgen(jjtree) pContextItemExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPCONTEXTITEMEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pContextItemExpr */
                                                 try {
/*@egen*/ "."/*@bgen(jjtree)*/
                                                 } finally {
                                                   if (jjtc000) {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtn000.jjtSetLastToken(getToken(0));
                                                   }
                                                 }
/*@egen*/ }
/*[132]*/ private void pOrderedExpr() : {/*@bgen(jjtree) pOrderedExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPORDEREDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pOrderedExpr */
                                             try {
/*@egen*/ "ordered" "{" pExpr() "}"/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[133]*/ private void pUnorderedExpr() : {/*@bgen(jjtree) pUnorderedExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPUNORDEREDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pUnorderedExpr */
                                               try {
/*@egen*/ "unordered" "{" pExpr() "}"/*@bgen(jjtree)*/
                                               } catch (Throwable jjte000) {
                                                 if (jjtc000) {
                                                   jjtree.clearNodeScope(jjtn000);
                                                   jjtc000 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte000 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte000;
                                                 }
                                                 if (jjte000 instanceof ParseException) {
                                                   throw (ParseException)jjte000;
                                                 }
                                                 throw (Error)jjte000;
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[134]*/ private void pFunctionCall() : {/*@bgen(jjtree) pFunctionCall */
  SimpleNode jjtn000 = new SimpleNode(JJTPFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pFunctionCall */
                                              try {
/*@egen*/ pEQName() pArgumentList()/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ /* xgc: reserved-function-namespXQ()30 */ /* gn: parenspXQ()30 */ }
/*[135]*/ private void pArgument() : {/*@bgen(jjtree) pArgument */
  SimpleNode jjtn000 = new SimpleNode(JJTPARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pArgument */
                                          try {
/*@egen*/ pExprSingle() | pArgumentPlaceholder()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[136]*/ private void pArgumentPlaceholder() : {/*@bgen(jjtree) pArgumentPlaceholder */
  SimpleNode jjtn000 = new SimpleNode(JJTPARGUMENTPLACEHOLDER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pArgumentPlaceholder */
                                                     try {
/*@egen*/ "?"/*@bgen(jjtree)*/
                                                     } finally {
                                                       if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/ }
/*[137]*/ private void pConstructor() : {/*@bgen(jjtree) pConstructor */
  SimpleNode jjtn000 = new SimpleNode(JJTPCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pConstructor */
                                             try {
/*@egen*/ pDirectConstructor() | pComputedConstructor()/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[138]*/ private void pDirectConstructor() : {/*@bgen(jjtree) pDirectConstructor */
  SimpleNode jjtn000 = new SimpleNode(JJTPDIRECTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pDirectConstructor */
                                                   try {
/*@egen*/ pDirElemConstructor() | pDirCommentConstructor() | pDirPIConstructor()/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte000) {
                                                     if (jjtc000) {
                                                       jjtree.clearNodeScope(jjtn000);
                                                       jjtc000 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte000 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte000;
                                                     }
                                                     if (jjte000 instanceof ParseException) {
                                                       throw (ParseException)jjte000;
                                                     }
                                                     throw (Error)jjte000;
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[139]*/ private void pDirElemConstructor() : {/*@bgen(jjtree) pDirElemConstructor */
                                                 SimpleNode jjtn000 = new SimpleNode(JJTPDIRELEMCONSTRUCTOR);
                                                 boolean jjtc000 = true;
                                                 jjtree.openNodeScope(jjtn000);
                                                 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ int s; } {/*@bgen(jjtree) pDirElemConstructor */
                                                            try {
/*@egen*/ <T_LT> { s=chgState(IN_TAG); } pQName() pDirAttributeList() (<T_SLSH_GT>/*@bgen(jjtree)*/
                                                                                                                                     {
                                                                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                       jjtc000 = false;
                                                                                                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                                                                                                     }
/*@egen*/ { chgState(s); } | (<T_GT> { chgState(IN_ELEM); } (pDirElemContent())* <T_LT_SLSH> { chgState(IN_TAG); } pQName() (<S>)? <T_GT>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                       jjtc000 = false;
                                                                                                                                                                                                                                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                                                                                                                                                                                                                                     }
/*@egen*/ { chgState(s); }))/*@bgen(jjtree)*/
                                                            } catch (Throwable jjte000) {
                                                              if (jjtc000) {
                                                                jjtree.clearNodeScope(jjtn000);
                                                                jjtc000 = false;
                                                              } else {
                                                                jjtree.popNode();
                                                              }
                                                              if (jjte000 instanceof RuntimeException) {
                                                                throw (RuntimeException)jjte000;
                                                              }
                                                              if (jjte000 instanceof ParseException) {
                                                                throw (ParseException)jjte000;
                                                              }
                                                              throw (Error)jjte000;
                                                            } finally {
                                                              if (jjtc000) {
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtn000.jjtSetLastToken(getToken(0));
                                                              }
                                                            }
/*@egen*/ }
/*[140]*/ private void pDirAttributeList() : {/*@bgen(jjtree) pDirAttributeList */
  SimpleNode jjtn000 = new SimpleNode(JJTPDIRATTRIBUTELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pDirAttributeList */
                                                  try {
/*@egen*/ (<S> (pQName() (<S>)? "=" (<S>)? pDirAttributeValue())?)*/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte000) {
                                                    if (jjtc000) {
                                                      jjtree.clearNodeScope(jjtn000);
                                                      jjtc000 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte000 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte000;
                                                    }
                                                    if (jjte000 instanceof ParseException) {
                                                      throw (ParseException)jjte000;
                                                    }
                                                    throw (Error)jjte000;
                                                  } finally {
                                                    if (jjtc000) {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtn000.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/ /* ws: explicitpXQ()30 */ }
/*[141]*/ private void pDirAttributeValue() : {/*@bgen(jjtree) pDirAttributeValue */
  SimpleNode jjtn000 = new SimpleNode(JJTPDIRATTRIBUTEVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pDirAttributeValue */
                                                   try {
/*@egen*/ (<T_QUOT> { chgState(IN_QUOT); } (<ESCAPE_QUOT> | pQuotAttrValueContent())* <T_QUOT>/*@bgen(jjtree)*/
                                                                                                                                        {
                                                                                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                          jjtc000 = false;
                                                                                                                                          jjtn000.jjtSetLastToken(getToken(0));
                                                                                                                                        }
/*@egen*/ { chgState(IN_TAG); }) | (<T_APOS> { chgState(IN_APOS); } (<ESCAPE_APOS> | pAposAttrValueContent())* <T_APOS>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                        jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                        jjtc000 = false;
                                                                                                                                                                                                                                                        jjtn000.jjtSetLastToken(getToken(0));
                                                                                                                                                                                                                                                      }
/*@egen*/ { chgState(IN_TAG); })/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte000) {
                                                     if (jjtc000) {
                                                       jjtree.clearNodeScope(jjtn000);
                                                       jjtc000 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte000 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte000;
                                                     }
                                                     if (jjte000 instanceof ParseException) {
                                                       throw (ParseException)jjte000;
                                                     }
                                                     throw (Error)jjte000;
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[142]*/ private void pQuotAttrValueContent() : {/*@bgen(jjtree) pQuotAttrValueContent */
  SimpleNode jjtn000 = new SimpleNode(JJTPQUOTATTRVALUECONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pQuotAttrValueContent */
                                                      try {
/*@egen*/ <QUOT_ATTR_CONTENT_CHAR> | pCommonContent()/*@bgen(jjtree)*/
                                                      } catch (Throwable jjte000) {
                                                        if (jjtc000) {
                                                          jjtree.clearNodeScope(jjtn000);
                                                          jjtc000 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte000 instanceof RuntimeException) {
                                                          throw (RuntimeException)jjte000;
                                                        }
                                                        if (jjte000 instanceof ParseException) {
                                                          throw (ParseException)jjte000;
                                                        }
                                                        throw (Error)jjte000;
                                                      } finally {
                                                        if (jjtc000) {
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtn000.jjtSetLastToken(getToken(0));
                                                        }
                                                      }
/*@egen*/ }
/*[143]*/ private void pAposAttrValueContent() : {/*@bgen(jjtree) pAposAttrValueContent */
  SimpleNode jjtn000 = new SimpleNode(JJTPAPOSATTRVALUECONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAposAttrValueContent */
                                                      try {
/*@egen*/ <APOS_ATTR_CONTENT_CHAR> | pCommonContent()/*@bgen(jjtree)*/
                                                      } catch (Throwable jjte000) {
                                                        if (jjtc000) {
                                                          jjtree.clearNodeScope(jjtn000);
                                                          jjtc000 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte000 instanceof RuntimeException) {
                                                          throw (RuntimeException)jjte000;
                                                        }
                                                        if (jjte000 instanceof ParseException) {
                                                          throw (ParseException)jjte000;
                                                        }
                                                        throw (Error)jjte000;
                                                      } finally {
                                                        if (jjtc000) {
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtn000.jjtSetLastToken(getToken(0));
                                                        }
                                                      }
/*@egen*/ }
/*[144]*/ private void pDirElemContent() : {/*@bgen(jjtree) pDirElemContent */
  SimpleNode jjtn000 = new SimpleNode(JJTPDIRELEMCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pDirElemContent */
                                                try {
/*@egen*/ LOOKAHEAD(2) pCDataSection() | pDirectConstructor() | pCommonContent() | <ELEMENT_CONTENT_CHAR>/*@bgen(jjtree)*/
                                                } catch (Throwable jjte000) {
                                                  if (jjtc000) {
                                                    jjtree.clearNodeScope(jjtn000);
                                                    jjtc000 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte000 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte000;
                                                  }
                                                  if (jjte000 instanceof ParseException) {
                                                    throw (ParseException)jjte000;
                                                  }
                                                  throw (Error)jjte000;
                                                } finally {
                                                  if (jjtc000) {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtn000.jjtSetLastToken(getToken(0));
                                                  }
                                                }
/*@egen*/ }
/*[145]*/ // See below for extended "CommonContent" rule.
/*[103]*/ private void pDirCommentConstructor() : {/*@bgen(jjtree) pDirCommentConstructor */
  SimpleNode jjtn000 = new SimpleNode(JJTPDIRCOMMENTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pDirCommentConstructor */
                                                       try {
/*@egen*/ <DIR_COMMENT_START> (<DIR_COMMENT_CHAR>)* <DIR_COMMENT_END>/*@bgen(jjtree)*/
                                                       } finally {
                                                         if (jjtc000) {
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtn000.jjtSetLastToken(getToken(0));
                                                         }
                                                       }
/*@egen*/ }
/*[147]*/ // See below for special "DirCommentContents" handling.
/*[148]*/ private void pDirPIConstructor() : {/*@bgen(jjtree) pDirPIConstructor */
  SimpleNode jjtn000 = new SimpleNode(JJTPDIRPICONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pDirPIConstructor */
                                                  try {
/*@egen*/ <DIR_PI_START> <PI_TARGET> (<DIR_PI_S> (<DIR_PI_CHAR>)*)? <DIR_PI_END>/*@bgen(jjtree)*/
                                                  } finally {
                                                    if (jjtc000) {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtn000.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/ }
/*[149]*/ // See below for special "DirPIContents" handling.
/*[150] private void pCDataSection() : {} { <CDATA_SECTION_START> (<CDATA_SECTION_CHAR>)* <CDATA_SECTION_END> }*/
/*[150] private void pCDataSection() : {} { <CDATA_SECTION_START> (LOOKAHEAD(3) pWAQLExtension(UsageType.AS_EXPR) | (LOOKAHEAD(2) <CDATA_SECTION_CHAR>)+)* <CDATA_SECTION_END> }*/
/*[150] private void pCDataSection() : {} { "<![CDATA[" (<CDATA_CONTENT_CHAR> | pWAQLExtension(UsageType.AS_EXPR)) "]]>" }*/
/*[150]*/ private void pCDataSection() : {/*@bgen(jjtree) pCDataSection */
  SimpleNode jjtn000 = new SimpleNode(JJTPCDATASECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCDataSection */
                                              try {
/*@egen*/ <CDATA_SECTION_START> (LOOKAHEAD(3) pDataDependencyCdata() | (LOOKAHEAD(2) <CDATA_REGULAR_CHAR>)+)* <CDATA_SECTION_END>/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[151]*/ // See below for special "CDataSectionContents" handling.
/*[152]*/ private void pComputedConstructor() : {/*@bgen(jjtree) pComputedConstructor */
  SimpleNode jjtn000 = new SimpleNode(JJTPCOMPUTEDCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pComputedConstructor */
                                                     try {
/*@egen*/ pCompDocConstructor() | pCompElemConstructor() | pCompAttrConstructor() | pCompNamespaceConstructor() | pCompTextConstructor() | pCompCommentConstructor() | pCompPIConstructor()/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte000) {
                                                       if (jjtc000) {
                                                         jjtree.clearNodeScope(jjtn000);
                                                         jjtc000 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte000 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte000;
                                                       }
                                                       if (jjte000 instanceof ParseException) {
                                                         throw (ParseException)jjte000;
                                                       }
                                                       throw (Error)jjte000;
                                                     } finally {
                                                       if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/ }
/*[153]*/ private void pCompDocConstructor() : {/*@bgen(jjtree) pCompDocConstructor */
  SimpleNode jjtn000 = new SimpleNode(JJTPCOMPDOCCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCompDocConstructor */
                                                    try {
/*@egen*/ "document" "{" pExpr() "}"/*@bgen(jjtree)*/
                                                    } catch (Throwable jjte000) {
                                                      if (jjtc000) {
                                                        jjtree.clearNodeScope(jjtn000);
                                                        jjtc000 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte000 instanceof RuntimeException) {
                                                        throw (RuntimeException)jjte000;
                                                      }
                                                      if (jjte000 instanceof ParseException) {
                                                        throw (ParseException)jjte000;
                                                      }
                                                      throw (Error)jjte000;
                                                    } finally {
                                                      if (jjtc000) {
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtn000.jjtSetLastToken(getToken(0));
                                                      }
                                                    }
/*@egen*/ }
/*[154]*/ private void pCompElemConstructor() : {/*@bgen(jjtree) pCompElemConstructor */
  SimpleNode jjtn000 = new SimpleNode(JJTPCOMPELEMCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCompElemConstructor */
                                                     try {
/*@egen*/ "element" (pEQName() | ("{" pExpr() "}")) "{" (pContentExpr())? "}"/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte000) {
                                                       if (jjtc000) {
                                                         jjtree.clearNodeScope(jjtn000);
                                                         jjtc000 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte000 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte000;
                                                       }
                                                       if (jjte000 instanceof ParseException) {
                                                         throw (ParseException)jjte000;
                                                       }
                                                       throw (Error)jjte000;
                                                     } finally {
                                                       if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/ }
/*[155]*/ private void pContentExpr() : {/*@bgen(jjtree) pContentExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPCONTENTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pContentExpr */
                                             try {
/*@egen*/ pExpr()/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[156]*/ private void pCompAttrConstructor() : {/*@bgen(jjtree) pCompAttrConstructor */
  SimpleNode jjtn000 = new SimpleNode(JJTPCOMPATTRCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCompAttrConstructor */
                                                     try {
/*@egen*/ "attribute" (pEQName() | ("{" pExpr() "}")) "{" (pExpr())? "}"/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte000) {
                                                       if (jjtc000) {
                                                         jjtree.clearNodeScope(jjtn000);
                                                         jjtc000 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte000 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte000;
                                                       }
                                                       if (jjte000 instanceof ParseException) {
                                                         throw (ParseException)jjte000;
                                                       }
                                                       throw (Error)jjte000;
                                                     } finally {
                                                       if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/ }
/*[157]*/ private void pCompNamespaceConstructor() : {/*@bgen(jjtree) pCompNamespaceConstructor */
  SimpleNode jjtn000 = new SimpleNode(JJTPCOMPNAMESPACECONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCompNamespaceConstructor */
                                                          try {
/*@egen*/ "namespace" (pPrefix() | ("{" pPrefixExpr() "}")) "{" (pURIExpr())? "}"/*@bgen(jjtree)*/
                                                          } catch (Throwable jjte000) {
                                                            if (jjtc000) {
                                                              jjtree.clearNodeScope(jjtn000);
                                                              jjtc000 = false;
                                                            } else {
                                                              jjtree.popNode();
                                                            }
                                                            if (jjte000 instanceof RuntimeException) {
                                                              throw (RuntimeException)jjte000;
                                                            }
                                                            if (jjte000 instanceof ParseException) {
                                                              throw (ParseException)jjte000;
                                                            }
                                                            throw (Error)jjte000;
                                                          } finally {
                                                            if (jjtc000) {
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtn000.jjtSetLastToken(getToken(0));
                                                            }
                                                          }
/*@egen*/ }
/*[158]*/ private void pPrefix() : {/*@bgen(jjtree) pPrefix */
  SimpleNode jjtn000 = new SimpleNode(JJTPPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pPrefix */
                                        try {
/*@egen*/ pNCName()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtn000.jjtSetLastToken(getToken(0));
                                          }
                                        }
/*@egen*/ }
/*[159]*/ private void pPrefixExpr() : {/*@bgen(jjtree) pPrefixExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPPREFIXEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pPrefixExpr */
                                            try {
/*@egen*/ pExpr()/*@bgen(jjtree)*/
                                            } catch (Throwable jjte000) {
                                              if (jjtc000) {
                                                jjtree.clearNodeScope(jjtn000);
                                                jjtc000 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte000 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte000;
                                              }
                                              if (jjte000 instanceof ParseException) {
                                                throw (ParseException)jjte000;
                                              }
                                              throw (Error)jjte000;
                                            } finally {
                                              if (jjtc000) {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtn000.jjtSetLastToken(getToken(0));
                                              }
                                            }
/*@egen*/ }
/*[160]*/ private void pURIExpr() : {/*@bgen(jjtree) pURIExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPURIEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pURIExpr */
                                         try {
/*@egen*/ pExpr()/*@bgen(jjtree)*/
                                         } catch (Throwable jjte000) {
                                           if (jjtc000) {
                                             jjtree.clearNodeScope(jjtn000);
                                             jjtc000 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte000 instanceof RuntimeException) {
                                             throw (RuntimeException)jjte000;
                                           }
                                           if (jjte000 instanceof ParseException) {
                                             throw (ParseException)jjte000;
                                           }
                                           throw (Error)jjte000;
                                         } finally {
                                           if (jjtc000) {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtn000.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/ }
/*[161]*/ private void pCompTextConstructor() : {/*@bgen(jjtree) pCompTextConstructor */
  SimpleNode jjtn000 = new SimpleNode(JJTPCOMPTEXTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCompTextConstructor */
                                                     try {
/*@egen*/ "text" "{" pExpr() "}"/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte000) {
                                                       if (jjtc000) {
                                                         jjtree.clearNodeScope(jjtn000);
                                                         jjtc000 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte000 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte000;
                                                       }
                                                       if (jjte000 instanceof ParseException) {
                                                         throw (ParseException)jjte000;
                                                       }
                                                       throw (Error)jjte000;
                                                     } finally {
                                                       if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/ }
/*[162]*/ private void pCompCommentConstructor() : {/*@bgen(jjtree) pCompCommentConstructor */
  SimpleNode jjtn000 = new SimpleNode(JJTPCOMPCOMMENTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCompCommentConstructor */
                                                        try {
/*@egen*/ "comment" "{" pExpr() "}"/*@bgen(jjtree)*/
                                                        } catch (Throwable jjte000) {
                                                          if (jjtc000) {
                                                            jjtree.clearNodeScope(jjtn000);
                                                            jjtc000 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte000 instanceof RuntimeException) {
                                                            throw (RuntimeException)jjte000;
                                                          }
                                                          if (jjte000 instanceof ParseException) {
                                                            throw (ParseException)jjte000;
                                                          }
                                                          throw (Error)jjte000;
                                                        } finally {
                                                          if (jjtc000) {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtn000.jjtSetLastToken(getToken(0));
                                                          }
                                                        }
/*@egen*/ }
/*[163]*/ private void pCompPIConstructor() : {/*@bgen(jjtree) pCompPIConstructor */
  SimpleNode jjtn000 = new SimpleNode(JJTPCOMPPICONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCompPIConstructor */
                                                   try {
/*@egen*/ "processing-instruction" (pNCName() | ("{" pExpr() "}")) "{" (pExpr())? "}"/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte000) {
                                                     if (jjtc000) {
                                                       jjtree.clearNodeScope(jjtn000);
                                                       jjtc000 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte000 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte000;
                                                     }
                                                     if (jjte000 instanceof ParseException) {
                                                       throw (ParseException)jjte000;
                                                     }
                                                     throw (Error)jjte000;
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[164]*/ private void pFunctionItemExpr() : {/*@bgen(jjtree) pFunctionItemExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPFUNCTIONITEMEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pFunctionItemExpr */
                                                  try {
/*@egen*/ LOOKAHEAD(2) pLiteralFunctionItem() | LOOKAHEAD(2) pInlineFunction()/*@bgen(jjtree)*/
                                                  } catch (Throwable jjte000) {
                                                    if (jjtc000) {
                                                      jjtree.clearNodeScope(jjtn000);
                                                      jjtc000 = false;
                                                    } else {
                                                      jjtree.popNode();
                                                    }
                                                    if (jjte000 instanceof RuntimeException) {
                                                      throw (RuntimeException)jjte000;
                                                    }
                                                    if (jjte000 instanceof ParseException) {
                                                      throw (ParseException)jjte000;
                                                    }
                                                    throw (Error)jjte000;
                                                  } finally {
                                                    if (jjtc000) {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtn000.jjtSetLastToken(getToken(0));
                                                    }
                                                  }
/*@egen*/ }
/*[165]*/ private void pLiteralFunctionItem() : {/*@bgen(jjtree) pLiteralFunctionItem */
  SimpleNode jjtn000 = new SimpleNode(JJTPLITERALFUNCTIONITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pLiteralFunctionItem */
                                                     try {
/*@egen*/ pEQName() "#" pIntegerLiteral()/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte000) {
                                                       if (jjtc000) {
                                                         jjtree.clearNodeScope(jjtn000);
                                                         jjtc000 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte000 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte000;
                                                       }
                                                       if (jjte000 instanceof ParseException) {
                                                         throw (ParseException)jjte000;
                                                       }
                                                       throw (Error)jjte000;
                                                     } finally {
                                                       if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/ /* xgc: reserved-function-namespXQ()30 */ }
/*[166]*/ private void pInlineFunction() : {/*@bgen(jjtree) pInlineFunction */
  SimpleNode jjtn000 = new SimpleNode(JJTPINLINEFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pInlineFunction */
                                                try {
/*@egen*/ "function" "(" (pParamList())? ")" ("as" pSequenceType())? pEnclosedExpr()/*@bgen(jjtree)*/
                                                } catch (Throwable jjte000) {
                                                  if (jjtc000) {
                                                    jjtree.clearNodeScope(jjtn000);
                                                    jjtc000 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte000 instanceof RuntimeException) {
                                                    throw (RuntimeException)jjte000;
                                                  }
                                                  if (jjte000 instanceof ParseException) {
                                                    throw (ParseException)jjte000;
                                                  }
                                                  throw (Error)jjte000;
                                                } finally {
                                                  if (jjtc000) {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtn000.jjtSetLastToken(getToken(0));
                                                  }
                                                }
/*@egen*/ }
/*[167]*/ private void pSingleType() : {/*@bgen(jjtree) pSingleType */
  SimpleNode jjtn000 = new SimpleNode(JJTPSINGLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pSingleType */
                                            try {
/*@egen*/ pAtomicOrUnionType() ("?")?/*@bgen(jjtree)*/
                                            } catch (Throwable jjte000) {
                                              if (jjtc000) {
                                                jjtree.clearNodeScope(jjtn000);
                                                jjtc000 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte000 instanceof RuntimeException) {
                                                throw (RuntimeException)jjte000;
                                              }
                                              if (jjte000 instanceof ParseException) {
                                                throw (ParseException)jjte000;
                                              }
                                              throw (Error)jjte000;
                                            } finally {
                                              if (jjtc000) {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtn000.jjtSetLastToken(getToken(0));
                                              }
                                            }
/*@egen*/ }
/*[168]*/ private void pTypeDeclaration() : {/*@bgen(jjtree) pTypeDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTPTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pTypeDeclaration */
                                                 try {
/*@egen*/ "as" pSequenceType()/*@bgen(jjtree)*/
                                                 } catch (Throwable jjte000) {
                                                   if (jjtc000) {
                                                     jjtree.clearNodeScope(jjtn000);
                                                     jjtc000 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte000 instanceof RuntimeException) {
                                                     throw (RuntimeException)jjte000;
                                                   }
                                                   if (jjte000 instanceof ParseException) {
                                                     throw (ParseException)jjte000;
                                                   }
                                                   throw (Error)jjte000;
                                                 } finally {
                                                   if (jjtc000) {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtn000.jjtSetLastToken(getToken(0));
                                                   }
                                                 }
/*@egen*/ }
/*[169]*/ private void pSequenceType() : {/*@bgen(jjtree) pSequenceType */
  SimpleNode jjtn000 = new SimpleNode(JJTPSEQUENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pSequenceType */
                                              try {
/*@egen*/ LOOKAHEAD(2) ("empty-sequence" "(" ")") | (pItemType() (LOOKAHEAD(2) pOccurrenceIndicator())?)/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[170]*/ private void pOccurrenceIndicator() : {/*@bgen(jjtree) pOccurrenceIndicator */
  SimpleNode jjtn000 = new SimpleNode(JJTPOCCURRENCEINDICATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pOccurrenceIndicator */
                                                     try {
/*@egen*/ "?" | "*" | "+"/*@bgen(jjtree)*/
                                                     } finally {
                                                       if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/ /* xgc: occurrence-indicatorspXQ()30 */ }
/*[171]*/ private void pItemType() : {/*@bgen(jjtree) pItemType */
  SimpleNode jjtn000 = new SimpleNode(JJTPITEMTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pItemType */
                                          try {
/*@egen*/ LOOKAHEAD(2) pKindTest() | LOOKAHEAD(2) ("item" "(" ")") | LOOKAHEAD(2) pFunctionTest() | LOOKAHEAD(2) pAtomicOrUnionType() | pParenthesizedItemType()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[172]*/ private void pAtomicOrUnionType() : {/*@bgen(jjtree) pAtomicOrUnionType */
  SimpleNode jjtn000 = new SimpleNode(JJTPATOMICORUNIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAtomicOrUnionType */
                                                   try {
/*@egen*/ pEQName()/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte000) {
                                                     if (jjtc000) {
                                                       jjtree.clearNodeScope(jjtn000);
                                                       jjtc000 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte000 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte000;
                                                     }
                                                     if (jjte000 instanceof ParseException) {
                                                       throw (ParseException)jjte000;
                                                     }
                                                     throw (Error)jjte000;
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[173]*/ private void pKindTest() : {/*@bgen(jjtree) pKindTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPKINDTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pKindTest */
                                          try {
/*@egen*/ pDocumentTest() | pElementTest() | pAttributeTest() | pSchemaElementTest() | pSchemaAttributeTest() | pPITest() | pCommentTest() | pTextTest() | pNamespaceNodeTest() | pAnyKindTest()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[174]*/ private void pAnyKindTest() : {/*@bgen(jjtree) pAnyKindTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPANYKINDTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAnyKindTest */
                                             try {
/*@egen*/ "node" "(" ")"/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[175]*/ private void pDocumentTest() : {/*@bgen(jjtree) pDocumentTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPDOCUMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pDocumentTest */
                                              try {
/*@egen*/ "document-node" "(" (pElementTest() | pSchemaElementTest())? ")"/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[176]*/ private void pTextTest() : {/*@bgen(jjtree) pTextTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPTEXTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pTextTest */
                                          try {
/*@egen*/ "text" "(" ")"/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[177]*/ private void pCommentTest() : {/*@bgen(jjtree) pCommentTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPCOMMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCommentTest */
                                             try {
/*@egen*/ "comment" "(" ")"/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[178]*/ private void pNamespaceNodeTest() : {/*@bgen(jjtree) pNamespaceNodeTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPNAMESPACENODETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pNamespaceNodeTest */
                                                   try {
/*@egen*/ "namespace-node" "(" ")"/*@bgen(jjtree)*/
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[179]*/ private void pPITest() : {/*@bgen(jjtree) pPITest */
  SimpleNode jjtn000 = new SimpleNode(JJTPPITEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pPITest */
                                        try {
/*@egen*/ "processing-instruction" "(" (pNCName() | <STRING_LITERAL>)? ")"/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtn000.jjtSetLastToken(getToken(0));
                                          }
                                        }
/*@egen*/ }
/*[180]*/ private void pAttributeTest() : {/*@bgen(jjtree) pAttributeTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPATTRIBUTETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAttributeTest */
                                               try {
/*@egen*/ "attribute" "(" (pAttribNameOrWildcard() ("," pTypeName())?)? ")"/*@bgen(jjtree)*/
                                               } catch (Throwable jjte000) {
                                                 if (jjtc000) {
                                                   jjtree.clearNodeScope(jjtn000);
                                                   jjtc000 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte000 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte000;
                                                 }
                                                 if (jjte000 instanceof ParseException) {
                                                   throw (ParseException)jjte000;
                                                 }
                                                 throw (Error)jjte000;
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[181]*/ private void pAttribNameOrWildcard() : {/*@bgen(jjtree) pAttribNameOrWildcard */
  SimpleNode jjtn000 = new SimpleNode(JJTPATTRIBNAMEORWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAttribNameOrWildcard */
                                                      try {
/*@egen*/ pAttributeName() | "*"/*@bgen(jjtree)*/
                                                      } catch (Throwable jjte000) {
                                                        if (jjtc000) {
                                                          jjtree.clearNodeScope(jjtn000);
                                                          jjtc000 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte000 instanceof RuntimeException) {
                                                          throw (RuntimeException)jjte000;
                                                        }
                                                        if (jjte000 instanceof ParseException) {
                                                          throw (ParseException)jjte000;
                                                        }
                                                        throw (Error)jjte000;
                                                      } finally {
                                                        if (jjtc000) {
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtn000.jjtSetLastToken(getToken(0));
                                                        }
                                                      }
/*@egen*/ }
/*[182]*/ private void pSchemaAttributeTest() : {/*@bgen(jjtree) pSchemaAttributeTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPSCHEMAATTRIBUTETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pSchemaAttributeTest */
                                                     try {
/*@egen*/ "schema-attribute" "(" pAttributeDeclaration() ")"/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte000) {
                                                       if (jjtc000) {
                                                         jjtree.clearNodeScope(jjtn000);
                                                         jjtc000 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte000 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte000;
                                                       }
                                                       if (jjte000 instanceof ParseException) {
                                                         throw (ParseException)jjte000;
                                                       }
                                                       throw (Error)jjte000;
                                                     } finally {
                                                       if (jjtc000) {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/ }
/*[183]*/ private void pAttributeDeclaration() : {/*@bgen(jjtree) pAttributeDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTPATTRIBUTEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAttributeDeclaration */
                                                      try {
/*@egen*/ pAttributeName()/*@bgen(jjtree)*/
                                                      } catch (Throwable jjte000) {
                                                        if (jjtc000) {
                                                          jjtree.clearNodeScope(jjtn000);
                                                          jjtc000 = false;
                                                        } else {
                                                          jjtree.popNode();
                                                        }
                                                        if (jjte000 instanceof RuntimeException) {
                                                          throw (RuntimeException)jjte000;
                                                        }
                                                        if (jjte000 instanceof ParseException) {
                                                          throw (ParseException)jjte000;
                                                        }
                                                        throw (Error)jjte000;
                                                      } finally {
                                                        if (jjtc000) {
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtn000.jjtSetLastToken(getToken(0));
                                                        }
                                                      }
/*@egen*/ }
/*[184]*/ private void pElementTest() : {/*@bgen(jjtree) pElementTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPELEMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pElementTest */
                                             try {
/*@egen*/ "element" "(" (pElementNameOrWildcard() ("," pTypeName() ("?")?)?)? ")"/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[185]*/ private void pElementNameOrWildcard() : {/*@bgen(jjtree) pElementNameOrWildcard */
  SimpleNode jjtn000 = new SimpleNode(JJTPELEMENTNAMEORWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pElementNameOrWildcard */
                                                       try {
/*@egen*/ pElementName() | "*"/*@bgen(jjtree)*/
                                                       } catch (Throwable jjte000) {
                                                         if (jjtc000) {
                                                           jjtree.clearNodeScope(jjtn000);
                                                           jjtc000 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte000 instanceof RuntimeException) {
                                                           throw (RuntimeException)jjte000;
                                                         }
                                                         if (jjte000 instanceof ParseException) {
                                                           throw (ParseException)jjte000;
                                                         }
                                                         throw (Error)jjte000;
                                                       } finally {
                                                         if (jjtc000) {
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtn000.jjtSetLastToken(getToken(0));
                                                         }
                                                       }
/*@egen*/ }
/*[186]*/ private void pSchemaElementTest() : {/*@bgen(jjtree) pSchemaElementTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPSCHEMAELEMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pSchemaElementTest */
                                                   try {
/*@egen*/ "schema-element" "(" pElementDeclaration() ")"/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte000) {
                                                     if (jjtc000) {
                                                       jjtree.clearNodeScope(jjtn000);
                                                       jjtc000 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte000 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte000;
                                                     }
                                                     if (jjte000 instanceof ParseException) {
                                                       throw (ParseException)jjte000;
                                                     }
                                                     throw (Error)jjte000;
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[187]*/ private void pElementDeclaration() : {/*@bgen(jjtree) pElementDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTPELEMENTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pElementDeclaration */
                                                    try {
/*@egen*/ pElementName()/*@bgen(jjtree)*/
                                                    } catch (Throwable jjte000) {
                                                      if (jjtc000) {
                                                        jjtree.clearNodeScope(jjtn000);
                                                        jjtc000 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte000 instanceof RuntimeException) {
                                                        throw (RuntimeException)jjte000;
                                                      }
                                                      if (jjte000 instanceof ParseException) {
                                                        throw (ParseException)jjte000;
                                                      }
                                                      throw (Error)jjte000;
                                                    } finally {
                                                      if (jjtc000) {
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtn000.jjtSetLastToken(getToken(0));
                                                      }
                                                    }
/*@egen*/ }
/*[188]*/ private void pAttributeName() : {/*@bgen(jjtree) pAttributeName */
  SimpleNode jjtn000 = new SimpleNode(JJTPATTRIBUTENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAttributeName */
                                               try {
/*@egen*/ pEQName()/*@bgen(jjtree)*/
                                               } catch (Throwable jjte000) {
                                                 if (jjtc000) {
                                                   jjtree.clearNodeScope(jjtn000);
                                                   jjtc000 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte000 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte000;
                                                 }
                                                 if (jjte000 instanceof ParseException) {
                                                   throw (ParseException)jjte000;
                                                 }
                                                 throw (Error)jjte000;
                                               } finally {
                                                 if (jjtc000) {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtn000.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/ }
/*[189]*/ private void pElementName() : {/*@bgen(jjtree) pElementName */
  SimpleNode jjtn000 = new SimpleNode(JJTPELEMENTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pElementName */
                                             try {
/*@egen*/ pEQName()/*@bgen(jjtree)*/
                                             } catch (Throwable jjte000) {
                                               if (jjtc000) {
                                                 jjtree.clearNodeScope(jjtn000);
                                                 jjtc000 = false;
                                               } else {
                                                 jjtree.popNode();
                                               }
                                               if (jjte000 instanceof RuntimeException) {
                                                 throw (RuntimeException)jjte000;
                                               }
                                               if (jjte000 instanceof ParseException) {
                                                 throw (ParseException)jjte000;
                                               }
                                               throw (Error)jjte000;
                                             } finally {
                                               if (jjtc000) {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
                                             }
/*@egen*/ }
/*[190]*/ private void pTypeName() : {/*@bgen(jjtree) pTypeName */
  SimpleNode jjtn000 = new SimpleNode(JJTPTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pTypeName */
                                          try {
/*@egen*/ pEQName()/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtn000.jjtSetLastToken(getToken(0));
                                            }
                                          }
/*@egen*/ }
/*[191]*/ private void pFunctionTest() : {/*@bgen(jjtree) pFunctionTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPFUNCTIONTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pFunctionTest */
                                              try {
/*@egen*/ (pAnnotation())* (LOOKAHEAD(3) pAnyFunctionTest() | LOOKAHEAD(3) pTypedFunctionTest())/*@bgen(jjtree)*/
                                              } catch (Throwable jjte000) {
                                                if (jjtc000) {
                                                  jjtree.clearNodeScope(jjtn000);
                                                  jjtc000 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte000 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte000;
                                                }
                                                if (jjte000 instanceof ParseException) {
                                                  throw (ParseException)jjte000;
                                                }
                                                throw (Error)jjte000;
                                              } finally {
                                                if (jjtc000) {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/ }
/*[192]*/ private void pAnyFunctionTest() : {/*@bgen(jjtree) pAnyFunctionTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPANYFUNCTIONTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pAnyFunctionTest */
                                                 try {
/*@egen*/ "function" "(" "*" ")"/*@bgen(jjtree)*/
                                                 } finally {
                                                   if (jjtc000) {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtn000.jjtSetLastToken(getToken(0));
                                                   }
                                                 }
/*@egen*/ }
/*[193]*/ private void pTypedFunctionTest() : {/*@bgen(jjtree) pTypedFunctionTest */
  SimpleNode jjtn000 = new SimpleNode(JJTPTYPEDFUNCTIONTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pTypedFunctionTest */
                                                   try {
/*@egen*/ "function" "(" (pSequenceType() ("," pSequenceType())*)? ")" "as" pSequenceType()/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte000) {
                                                     if (jjtc000) {
                                                       jjtree.clearNodeScope(jjtn000);
                                                       jjtc000 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte000 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte000;
                                                     }
                                                     if (jjte000 instanceof ParseException) {
                                                       throw (ParseException)jjte000;
                                                     }
                                                     throw (Error)jjte000;
                                                   } finally {
                                                     if (jjtc000) {
                                                       jjtree.closeNodeScope(jjtn000, true);
                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/ }
/*[194]*/ private void pParenthesizedItemType() : {/*@bgen(jjtree) pParenthesizedItemType */
  SimpleNode jjtn000 = new SimpleNode(JJTPPARENTHESIZEDITEMTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pParenthesizedItemType */
                                                       try {
/*@egen*/ "(" pItemType() ")"/*@bgen(jjtree)*/
                                                       } catch (Throwable jjte000) {
                                                         if (jjtc000) {
                                                           jjtree.clearNodeScope(jjtn000);
                                                           jjtc000 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte000 instanceof RuntimeException) {
                                                           throw (RuntimeException)jjte000;
                                                         }
                                                         if (jjte000 instanceof ParseException) {
                                                           throw (ParseException)jjte000;
                                                         }
                                                         throw (Error)jjte000;
                                                       } finally {
                                                         if (jjtc000) {
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtn000.jjtSetLastToken(getToken(0));
                                                         }
                                                       }
/*@egen*/ }
/*[195]*/ private void pURILiteral() : {/*@bgen(jjtree) pURILiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTPURILITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pURILiteral */
                                            try {
/*@egen*/ <STRING_LITERAL>/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc000) {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtn000.jjtSetLastToken(getToken(0));
                                              }
                                            }
/*@egen*/ }
/*[196]*/ private void pEQName() : {/*@bgen(jjtree) pEQName */
  SimpleNode jjtn000 = new SimpleNode(JJTPEQNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pEQName */
                                        try {
/*@egen*/ pQName() | (pURILiteral() ":" pNCName())/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtn000.jjtSetLastToken(getToken(0));
                                          }
                                        }
/*@egen*/ /* ws: explicitpXQ()30 */ }
/*[197]*/ private void pIntegerLiteral() : {/*@bgen(jjtree) pIntegerLiteral */
  SimpleNode jjtn000 = new SimpleNode(JJTPINTEGERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pIntegerLiteral */
                                                try {
/*@egen*/ <DIGITS>/*@bgen(jjtree)*/
                                                } finally {
                                                  if (jjtc000) {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtn000.jjtSetLastToken(getToken(0));
                                                  }
                                                }
/*@egen*/ }
/*[198]*/ TOKEN : { < DECIMAL_LITERAL : ("." <DIGITS>) | (<DIGITS> "." (["0"-"9"])*) > }
/*[199]*/ TOKEN : { < DOUBLE_LITERAL : (("." <DIGITS>) | (<DIGITS> ("." (["0"-"9"])*)?)) ["e","E"] (["+","-"])? <DIGITS> > }
/*[200]*/ TOKEN : { < STRING_LITERAL :  ("\"" (<PREDEFINED_ENTITY_REF> | <CHAR_REF> | <ESCAPE_QUOT> | ~["\"","&"])* "\"") | ("'" (<PREDEFINED_ENTITY_REF> | <CHAR_REF> | <ESCAPE_APOS> | ~["'","&"])* "'") > }
/*[201]*/ <IN_ELEM,IN_QUOT,IN_APOS> TOKEN : { < PREDEFINED_ENTITY_REF : "&" ("lt" | "gt" | "amp" | "quot" | "apos") ";" > }
/*[202]*/ <IN_QUOT> TOKEN : { < ESCAPE_QUOT : "\"\"" > }
/*[203]*/ <IN_APOS> TOKEN : { < ESCAPE_APOS : "''" > }
/*[204]*/ // See below for extended "ElementContentChar" rule.
/*[205]*/ // See below for extended "QuotAttrContentChar" rule.
/*[206]*/ // See below for extended "AposAttrContentChar" rule.
/*[207]*/ // See below for special "Comment" handling.
/*[208]*/ // See below for special "PITarget" handling.
/*[209]*/ <IN_ELEM,IN_QUOT,IN_APOS> TOKEN : { < CHAR_REF : ("&#" <DIGITS> ";") | ("&#x" (["0"-"9","a"-"f","A"-"F"])+ ";") > }
/*[210]*/ // See below for special "QName" handling.
/*[211]*/ // See below for special "NCName" handling.
/*[156]*/ <IN_TAG> TOKEN : { < S : (" " | "\t" | "\n" | "\r")+ > }




/*
 * Some parser rules have been altered to extend the original grammar with
 * our own WAQL extensions defined at the top of the file.
 */

/*[84]*/ private void pPrimaryExpr() : {/*@bgen(jjtree) pPrimaryExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTPPRIMARYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pPrimaryExpr */
        try {
/*@egen*/
	/*LOOKAHEAD(2) pWAQLExtension(UsageType.AS_EXPR) | LOOKAHEAD(2) pLiteral() | pVarRef() | pParenthesizedExpr() | pContextItemExpr() | LOOKAHEAD(2) pFunctionCall() | pOrderedExpr() | pUnorderedExpr() | LOOKAHEAD(2) pConstructor()*/
	LOOKAHEAD(3) pWAQLExtension(UsageType.AS_EXPR) | LOOKAHEAD(4) pLiteral() | pVarRef() | pParenthesizedExpr() | LOOKAHEAD(3) pContextItemExpr() | LOOKAHEAD(2) pFunctionCall() | LOOKAHEAD(2) pOrderedExpr() | pUnorderedExpr() | LOOKAHEAD(2) pConstructor()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/*[102]*/ private void pCommonContent() : {/*@bgen(jjtree) pCommonContent */
  SimpleNode jjtn000 = new SimpleNode(JJTPCOMMONCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pCommonContent */
        try {
/*@egen*/
	pWAQLExtension(UsageType.AS_TEXT) | pEscapeDollar() | <PREDEFINED_ENTITY_REF> | <CHAR_REF> | <T_CLB_CLB> | <T_CRB_CRB> | pEnclosedExpr()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/*[148]*/ <IN_ELEM> TOKEN : { < ELEMENT_CONTENT_CHAR : ~["{","}","<","&","$"] > }
/*[149]*/ <IN_QUOT> TOKEN : { < QUOT_ATTR_CONTENT_CHAR : ~["\"","{","}","<","&","$"] > }
/*[150]*/ <IN_APOS> TOKEN : { < APOS_ATTR_CONTENT_CHAR : ~["'","{","}","<","&","$"] > }
/*[150]*/ <IN_APOS> TOKEN : { < CDATA_CONTENT_CHAR : ~["$"] > }

/*
 * Some lexical analyzer matchers should actually match several different
 * token types, so we rewrote them as parser rules.
 */

private void pNonReservedKeywords() : {/*@bgen(jjtree) pNonReservedKeywords */
  SimpleNode jjtn000 = new SimpleNode(JJTPNONRESERVEDKEYWORDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pNonReservedKeywords */
        try {
/*@egen*/
	"allowing" | "ancestor" | "ancestor-or-self" | "and" | "as" | "ascending" | 
	"at" | "attribute" | "base-uri" | "boundary-space" | "by" | "case" | "cast" |
	"castable" | "catch" | "child" | "collation" | "comment" | "construction" |
	"context" | "copy-namespaces" | "count" | "decimal-format" | "decimal-separator" |
	"declare" | "default" | "descendant" |
	"descendant-or-self" | "descending" | "digit" | "div" | "document" | "document-node" |
	"element" | "else" | "empty" | "empty-sequence" | "encoding" | "end" | "eq" |
	"every" | "except" | "external" | "following" | "following-sibling" | "for" |
	"function" | "ge" | "greatest" | "group" | "grouping-separator" | "gt" | "idiv" | 
	"if" | "import" | "in" | "infinity" |
	"inherit" | "instance" | "intersect" | "is" | "item" | "lax" | "le" |
	"least" | "let" | "lt" | "minus-sign" | "mod" | "module" | "namespace" | 
	"namespace-node" | "NaN" | "ne" | "next" | "node" |
	"no-inherit" | "no-preserve" | "nondeterministic" | "of" | "only" | "option" | 
	"or" | "order" | "ordered" |
	"ordering" | "parent" | "pattern-separator" | "per-mille" | "percent" | "preceding" | 
	"preceding-sibling" | "preserve" | "previous" | "private" |
	"processing-instruction" | "public" | "return" | "satisfies" | "schema" |
	"schema-attribute" | "schema-element" | "self" | "sliding" | "some" | "stable" | "start" |
	"strict" | "strip" | "switch" | "text" | "then" | "to" | "treat" | "try" | "tumbling" | 
	"type" | "typeswitch" |
	"union" | "unordered" | "validate" | "variable" | "version" | "when" | "where" | "window" |
	"xquery" | "zero-digit"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

private void pQName() : {/*@bgen(jjtree) pQName */
  SimpleNode jjtn000 = new SimpleNode(JJTPQNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pQName */
        try {
/*@egen*/
	<Q_NAME> | <NC_NAME> | pNonReservedKeywords()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

private void pNCName() : {/*@bgen(jjtree) pNCName */
  SimpleNode jjtn000 = new SimpleNode(JJTPNCNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) pNCName */
        try {
/*@egen*/
	<NC_NAME>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

/*[154]*/ <DEFAULT,IN_PRAGMA1,IN_TAG> TOKEN : { < Q_NAME : <NC_NAME> ":" <NC_NAME> > }
/*[155]*/ <DEFAULT,IN_PRAGMA1,IN_TAG> TOKEN : { < NC_NAME : ["A"-"Z","a"-"z","_"] (["A"-"Z","a"-"z","_","-",".","0"-"9"])* > }

/*
 * Some lexical analyzer matchers have been rewritten using custom lexical
 * states to achieve explicit whitespace behavior.
 */

TOKEN_MGR_DECLS : {
	private int beforeInDirComment;
	private int beforeInDirPI;
	private int commentNestingDepth;
	private int beforeInCdata;
}

/*[67]+ws:explicit*/
<DEFAULT> TOKEN : { < PRAGMA_START : "(#" (<S>)? > : IN_PRAGMA1 }
<IN_PRAGMA1> TOKEN : { < PRAGMA_S : <S> > : IN_PRAGMA2 }
<IN_PRAGMA2> TOKEN : { < PRAGMA_CHAR : ~[] > }
<IN_PRAGMA1,IN_PRAGMA2> TOKEN : { < PRAGMA_END : "#)" > : DEFAULT }

/*[104]+ws:explicit*/
<DEFAULT,IN_ELEM> TOKEN : { < DIR_COMMENT_START : "<!--" > { beforeInDirComment=curLexState; } : IN_DIR_COMMENT }
<IN_DIR_COMMENT> TOKEN : { < DIR_COMMENT_CHAR : ~[] > }
<IN_DIR_COMMENT> TOKEN : { < DIR_COMMENT_INVALID : "--" > }
<IN_DIR_COMMENT> TOKEN : { < DIR_COMMENT_END : "-->" > { SwitchTo(beforeInDirComment); } }

/*[106]+[152]+ws:explicit*/
<DEFAULT,IN_ELEM> TOKEN : { < DIR_PI_START : "<?" > { beforeInDirPI=curLexState; } : IN_DIR_PI1 }
<IN_DIR_PI1> TOKEN : { < PI_TARGET_INVALID : ("X" | "x") ("M" | "m") ("L" | "l") > }
<IN_DIR_PI1> TOKEN : { < PI_TARGET : /*XXX actually this should be "Name"*/<NC_NAME> > }
<IN_DIR_PI1> TOKEN : { < DIR_PI_S : <S> > : IN_DIR_PI2 }
<IN_DIR_PI2> TOKEN : { < DIR_PI_CHAR : ~[] > }
<IN_DIR_PI1,IN_DIR_PI2> TOKEN : { < DIR_PI_END : "?>" > { SwitchTo(beforeInDirPI); } }

/*[108]+ws:explicit*/
<IN_ELEM> TOKEN : { < CDATA_SECTION_START : "<![CDATA[" > { beforeInCdata=curLexState; } : IN_CDATA_SECTION }
<IN_CDATA_SECTION> TOKEN : { < CDATA_REGULAR_CHAR : <CDATA_CONTENT_CHAR> > }
<IN_CDATA_SECTION> TOKEN : { < CDATA_DLR : "$" > : CDATA_AFTER_DLR }
<CDATA_AFTER_DLR> TOKEN : { < CDATA_ID_DIGITS : <DIGITS> > : CDATA_AFTER_ID }
<CDATA_AFTER_ID,CDATA_AFTER_DLR> TOKEN : { < CDATA_WAQL_BR_OPEN : "{" > : CDATA_IN_WAQL }
<CDATA_IN_WAQL> TOKEN : { < CDATA_WAQL_EXPR : ~["}"] > }
<CDATA_IN_WAQL> TOKEN : { < CDATA_WAQL_BR_CLOSE : "}" > : IN_CDATA_SECTION }
<IN_CDATA_SECTION> TOKEN : { < CDATA_SECTION_END : "]]>" > { SwitchTo(beforeInCdata); } }

/*[151]+ws:explicit*/
<DEFAULT>                MORE : { "(:" : IN_COMMENT }
<IN_COMMENT,IN_COMMENT2> MORE : { "(:" { commentNestingDepth++; } : IN_COMMENT2 }
<IN_COMMENT,IN_COMMENT2> MORE : { < ~[] > }
<IN_COMMENT2>            MORE : { ":)" { commentNestingDepth--; if(commentNestingDepth==0)SwitchTo(IN_COMMENT); } }
<IN_COMMENT>    SPECIAL_TOKEN : { ":)" : DEFAULT }

